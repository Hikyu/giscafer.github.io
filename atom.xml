<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giscafer&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://giscafer.com/"/>
  <updated>2017-05-09T16:26:35.801Z</updated>
  <id>http://giscafer.com/</id>
  
  <author>
    <name>giscafer</name>
    <email>giscafer@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从GISer到互联网前端工程师，JUST DO IT</title>
    <link href="http://giscafer.com/2017/05/10/giser-just-do-it/"/>
    <id>http://giscafer.com/2017/05/10/giser-just-do-it/</id>
    <published>2017-05-09T16:22:01.000Z</published>
    <updated>2017-05-09T16:26:35.801Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文首发于个人博客与个人微信公众号</em></p>
<p>更多经验分享欢迎围观本人 Live<a href="https:## www.zhihu.com/lives/844909623906549760" target="_blank" rel="external">「从 giser 到前端开发经理之路」</a></p>
<h2 id="我与GIS的结缘"><a href="#我与GIS的结缘" class="headerlink" title="我与GIS的结缘"></a>我与GIS的结缘</h2><p>2010年，我考上了西北农林科技大学，原第一志愿是机械相关的专业，服从调剂后，就被调配到了资环学院的地理信息系统专业，当时我是完全不知道地理信息系统是干什么的，更不清楚毕业能做什么工作，查了百科，专业的介绍更加懵逼了。</p>
<p>大一也没学什么专业课，尴尬的是回家，亲朋好友问所学专业，只能说是画地图的，后来学习遥感后，就说做遥感、GPS导航的。然后村里的老大爷听到就纷纷点头说，高科技啊，有前途！</p>
<p>一直到上大三，我才真正知道GIS毕业能做什么工作，大概有这么个方向：GIS相关软件使用相关岗位（包括数据处理，技术支持）、销售岗位（卖软件或者其他影像销售）、遥感相关从业技术人员（国内只有国企、事业单位）、测绘相关、IT方向；</p>
<a id="more"></a>
<h2 id="面对就业方向我是如何选择的"><a href="#面对就业方向我是如何选择的" class="headerlink" title="面对就业方向我是如何选择的"></a>面对就业方向我是如何选择的</h2><p><strong>GIS相关软件使用相关岗位</strong></p>
<p>性格不合适，读书的时候，有点高傲，认为软件使用没什么技术含量，并且觉得数据处理，数据矢量化什么的，是干苦力活的，所以不会考虑这个就业方向；</p>
<p><strong>销售岗位</strong></p>
<p>还是性格原因，不感兴趣，并且从来没有销售本领，像女生表白都没什么技术，何况推荐物品给别人；认为好的产品，做点广告你会自觉过来买，在人旁边唠叨推荐，我就觉得心烦。这也是为什么只去那些没有推荐员的衣服店里买衣服的原因~</p>
<p><strong>遥感相关从业技术人员</strong></p>
<p>个人并不打算考公务员，所以进国企事业单位没多考虑，并且在学校里边学习遥感相关的东西，也就是用Erdas处理影像，简单的成像识别，一些书本上的概念原理；本科学不到什么，想从事遥感技术方向的工作也比较困难。</p>
<p><strong>测绘相关</strong></p>
<p>实习的时候就体验过了，自己不适合做这行，感谢测绘人员对GIS基础数据的共享！</p>
<p><strong>IT行业</strong></p>
<p>和性格爱好有关，喜欢玩电脑，这里的玩电脑并不是说玩游戏，大学四年，我玩的游戏只有NBA2K，打打三国战绩，拳皇，游戏上浪费的时间很少（很庆幸）；然而我喜欢整的是软件安装破解，重装系统，网站搭建推广什么的。GIS520社区就是大三暑假的时候整的。尴尬的是，到了大四，我能从事IT行业相关工作也没什么技术，能胜任选择的确实只有数据处理相关的技术支持岗位。但我当时的内心是做编程开发，兴趣是从搭建GIS520产生的，于是我就开始自学一些编程技术。</p>
<p><strong>（以上仅是当初个人想法）</strong></p>
<h2 id="转折点—实习"><a href="#转折点—实习" class="headerlink" title="转折点—实习"></a>转折点—实习</h2><p>大三其实有准备考研，我选择考研的目的是担心找不到好工作，想从事编程行业，但是白纸一张，作为资源环境学院的地信专业，非常不重视计算机编程方向，软件系统原理，编程思想等课堂为0，然而在大一大二的我并没有觉悟到，一心想玩了（高中老师说的，上大学就可以好好玩了）。其实是怪自己，觉悟不高，另外环境氛围问题，我们学校的地信专业，IT编程方向就业氛围就不好，不能从学长学姐那里得到经验。</p>
<p>考研复习没坚持到最后，我就看编程书去了（考研不考编程），然后遇到了秋招，一家地信公司来我们学校招聘开发工程师，很幸运，人生第一次面试，还表现的很挫，也都能面试通过。最后去北京实习了不到两个月。</p>
<p>实习过程是懵逼的，很多东西上手不懂，有点混，但是自己也努力的去搞明白，学基础。</p>
<p>因为表现不好，在实习几周后，又一次被经理叫去聊天，问我是否对技术支持感兴趣，谈谈现在工作的看法。我表现的自卑，也说明自己目前技术不行，但是很不喜欢软件相关使用工作。然后就一直默默的干到实习结束，记得是清明准备放假，找个理由就回学校玩了。</p>
<p>虽然实习没能给公司贡献什么，但是实习的机会却使得我找到了方向，我清楚自己需要学习什么，从事WebGIS开发方向所需要掌握的技术，回学校后我就有空就一直学习。技术的学习方向并没有学长学姐可以请假，我是自己摸索的，当时找方向是这样的，查看招聘岗位要求的技能，就记下来，总结出来，然后就学习相关的技术。</p>
<h2 id="GIS软件开发工程师"><a href="#GIS软件开发工程师" class="headerlink" title="GIS软件开发工程师"></a>GIS软件开发工程师</h2><p>毕业了，我就去了实习的公司报道，当时有个好处就是，实习过的学生，毕业可以直接转正，所以，报道后就是正式入职员工了，GIS传统软件行业做WebGIS方向岗位有的也叫GIS软件开发工程师。</p>
<p>入职后，我被安排到了事业部；我心里认为是因为技术不行，被调部门了，不过我工作还是做WebGIS相关的开发工作，就觉得无所谓了。最后部门合并了，原来实习的部门合并到了事业部，最终都是一样的。</p>
<p>工作，入职就是做项目的，WebGIS项目开发，主要技术就是JavaScript/CSS/HTML，后端Java，数据库MySQL或者Oracle。这样学习方向就定的范围就更小了，先学好这些工作就轻松了。</p>
<p>工作的前两个月是比较困难的，记得当初和ZhangDK（一个同事）每天下班后都留在公司上晚自习，坚持了一两个月吧。慢慢的熟悉公司相关的技术，框架源码的阅读，项目做多了，也就熟悉了，待在公司里边做开发，做什么系统都可以了。</p>
<p>随着老员工的离职，我们就变成了老员工~</p>
<h2 id="忧患意识-前端开发工程师的蜕变"><a href="#忧患意识-前端开发工程师的蜕变" class="headerlink" title="忧患意识-前端开发工程师的蜕变"></a>忧患意识-前端开发工程师的蜕变</h2><p>做WebGIS开发工作，大部分是前端开发工作，然后自己就会关注前端领域的发展，发现互联网前端方向技术更替的很快，当时node.js、angularjs、前端自动化编程，grunt、gulp等技术流行开来，前端领域炙手可热，自己就时刻了解最新情况，然后再跟进学习技术。</p>
<p>我是从node.js下手开始的，原因是node.js能做后端开发，还是JavaScript语法，学会了自己就可以随意搭建网站或者一下demo应用，更好的学习前端开发。因为做开发的，前端后端你都得会，从前端到后端的交互等；当时因为Java技术不够深，其实使用Java搭建网站后台也是可以的，但是你要做很多工作，比如选择SSH框架，自己封装接口，写Controller等一套东西，学习Java后端这一套东西，花费的学习成本可不少。加上前端全家桶，你是没多少精力的。</p>
<p>node.js上手后，我就入门了Vue.js，angular.js等前端框架，通过gulp，webpack等工具构建环境，开发一些demo应用，了解框架的使用技术等，最后公司里边有项目用了angularjs1.x和有H5 app使用了ionic开发。我也是轻松上手的，当时顿时觉得受用很大。</p>
<p>然而前端技术更替没有停止，angular1.x的缺点导致Vue.js框架的流行开来，还有组件式编程的React的出现，React Native的出现等，带动了前端领域进军App，以及全端的方向发展。</p>
<p>去年我也学习了React，并且了解入门了React Native。发现前端能做的东西很多，只要你敢想象。</p>
<p>然而新公司使用了ng2开发web系统，nativescript开发app，两者对我来说都是全新的。我入职的时候花一周时间上手ng2，并且能指导其他新员工以及实习生做开发。这就是我前面积累的发挥。对于我熟悉使用ES6，以及学过TypeScript来说，ng2上手只需要一周时间，当然高级部分以及精通是需要花时间学习研究的。不过工作上，做系统，做功能，一般的就够了。如果你没有其他技术经验的积累，你可以去试试ng2上手的难度和实际~</p>
<p>我要说的是，前端技术在更替，并且会一直在变。如果你从事前端领域，你要保持一颗好奇接受新技术的心，也就是不停学习的心。当然，不要以为什么框架都懂了，你就牛逼了，最重要的还是基础，以及你从事方向的深入研究。框架就是工具，你学习使用和精通使用工具后，生产工具的原理，如何生产工具你也是要去研究掌握的。因为更多的工具会更具市场需求生产出来，作为程序猿，要想未来不被淘汰，你要作为工具生产者或者是了解工具生产过程的人，而不是仅仅是一个每年都可以用毕业生更换的螺丝钉！！！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后说一下为什么我离开了GIS行业。</p>
<p>我是从事WebGIS开发方向，也就是使用Java编程语言（不精通），然后用前端技术做GIS相关的Web开发，简单的地图js库调用实现一些功能，这样的工作不能长久，因为没机会接触核心的，比如ArcGIS JavaScript API这种库的开发才是方向。不然你的工作随时可以被未来毕业生替代。</p>
<p>另一个方面，比较尴尬的是GIS行业的前端技术和互联网前端相差如天地。并且开发的系统不注重体验，因为都是给当官的人用的，你看啊，是政府相关的网站哪个不是又丑又难用的。优化前端的体验等用到的技术也是要学习的，如果你学习了没机会用，那你可能就考虑一下转行了。</p>
<p>现实一点，个人认为传统软件行业的公司前景不好或者寿命不长，我不能把自己的技术和前途作为筹码赌博。并且薪酬和互联网差别会越来越大，也是因为技术栈差距越来越大。</p>
<p>未来前端会占领App市场~也就是前端开发工程师你要懂PC端，还要懂App端的开发，目前很多公司已经有要求了。现在我的工作就是，使用NativeScript开发App，一般作为前端的组长带领前端团队开发Web端的项目。我也是学习的过程，工作的过程也是学习的过程，那你就会有所成长！</p>
<p>更多经验分享欢迎围观本人 Live<a href="https:## www.zhihu.com/lives/844909623906549760" target="_blank" rel="external">「从 giser 到前端开发经理之路」</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文首发于个人博客与个人微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;更多经验分享欢迎围观本人 Live&lt;a href=&quot;https:## www.zhihu.com/lives/844909623906549760&quot;&gt;「从 giser 到前端开发经理之路」&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我与GIS的结缘&quot;&gt;&lt;a href=&quot;#我与GIS的结缘&quot; class=&quot;headerlink&quot; title=&quot;我与GIS的结缘&quot;&gt;&lt;/a&gt;我与GIS的结缘&lt;/h2&gt;&lt;p&gt;2010年，我考上了西北农林科技大学，原第一志愿是机械相关的专业，服从调剂后，就被调配到了资环学院的地理信息系统专业，当时我是完全不知道地理信息系统是干什么的，更不清楚毕业能做什么工作，查了百科，专业的介绍更加懵逼了。&lt;/p&gt;
&lt;p&gt;大一也没学什么专业课，尴尬的是回家，亲朋好友问所学专业，只能说是画地图的，后来学习遥感后，就说做遥感、GPS导航的。然后村里的老大爷听到就纷纷点头说，高科技啊，有前途！&lt;/p&gt;
&lt;p&gt;一直到上大三，我才真正知道GIS毕业能做什么工作，大概有这么个方向：GIS相关软件使用相关岗位（包括数据处理，技术支持）、销售岗位（卖软件或者其他影像销售）、遥感相关从业技术人员（国内只有国企、事业单位）、测绘相关、IT方向；&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="giscafer" scheme="http://giscafer.com/tags/giscafer/"/>
    
  </entry>
  
  <entry>
    <title>angular实现IM聊天图片发送</title>
    <link href="http://giscafer.com/2017/05/07/ng-im-sending-picture/"/>
    <id>http://giscafer.com/2017/05/07/ng-im-sending-picture/</id>
    <published>2017-05-07T03:49:39.000Z</published>
    <updated>2017-05-07T06:08:03.770Z</updated>
    
    <content type="html"><![CDATA[<p>IM聊天图片发送有两种方式</p>
<ul>
<li>截图粘贴到信息框后点击发送</li>
<li>选择本地图片发送</li>
</ul>
<p>图片剪切粘贴，使用QQ或者其他平台的截图功能，截图后粘贴<code>Ctrl+V</code>，这个过程需要获取粘贴板上的图片数据，并在页面中展示，也就是将图片数据创建一个img元素，就可以显示出来了。</p>
<a id="more"></a>
<h2 id="从粘贴面板中获取图片数据"><a href="#从粘贴面板中获取图片数据" class="headerlink" title="从粘贴面板中获取图片数据"></a>从粘贴面板中获取图片数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 黏贴发送图片</div><div class="line"> * @param e</div><div class="line"> */</div><div class="line">pasteData(e) &#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">let</span> clipboardData = e.clipboardData;</div><div class="line">    <span class="keyword">if</span> (clipboardData) &#123; <span class="comment">//如果支持这个</span></div><div class="line">        <span class="keyword">let</span> items = clipboardData.items; <span class="comment">//获取黏贴里的对象</span></div><div class="line">        <span class="keyword">if</span> (!items) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> item;</div><div class="line">        <span class="keyword">let</span> types = clipboardData.types || [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = types.length; i&lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (types[i] === <span class="string">'Files'</span>) &#123;</div><div class="line">                item = items[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (item &amp;&amp; item.kind === <span class="string">'file'</span> &amp;&amp; item.type.match(<span class="regexp">/^image\//i</span>)) &#123;</div><div class="line">            imgReader(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">imgReader</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> $messageBox=$(<span class="string">'#message-boxID'</span>);</div><div class="line">        <span class="keyword">let</span> file = obj.getAsFile(),</div><div class="line">            reader = <span class="keyword">new</span> FileReader();</div><div class="line">        <span class="comment">// 读取文件</span></div><div class="line">        reader.readAsDataURL(file);</div><div class="line">        reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line">            img.src = e.target[<span class="string">'result'</span>];</div><div class="line">            img.className = <span class="string">'chatImg'</span>;</div><div class="line"></div><div class="line">            $messageBox.append(img);</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                $messageBox.scrollTop($messageBox[<span class="number">0</span>].scrollHeight);</div><div class="line">            &#125;, <span class="number">0</span>)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="本地图片选择"><a href="#本地图片选择" class="headerlink" title="本地图片选择"></a>本地图片选择</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"upImg"</span>  <span class="attr">name</span>=<span class="string">"fileTrans"</span> <span class="attr">type</span>=<span class="string">"file"</span> (<span class="attr">change</span>)=<span class="string">"onFileSelect($event)"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 选择图片</div><div class="line"> * @param event</div><div class="line"> */</div><div class="line">files:any[]=[];</div><div class="line">onFileSelect(event) &#123;</div><div class="line">    <span class="keyword">this</span>.files=[];</div><div class="line">    <span class="keyword">let</span> files = event.dataTransfer ? event.dataTransfer.files : event.target.files;</div><div class="line">    <span class="keyword">let</span> file;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">        file = files[i];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isImage(file)) &#123;</div><div class="line">            file.objectURL = <span class="keyword">this</span>.sanitizer.bypassSecurityTrustUrl((<span class="built_in">window</span>.URL.createObjectURL(files[i])));</div><div class="line">            <span class="keyword">this</span>.files.push(files[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> fileUrl = file.objectURL.changingThisBreaksApplicationSecurity;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = fileUrl;</div><div class="line">    img.className = <span class="string">'chatImg'</span>;</div><div class="line"></div><div class="line">    $(<span class="string">'#message-boxID'</span>).append(img);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="图片上传服务器"><a href="#图片上传服务器" class="headerlink" title="图片上传服务器"></a>图片上传服务器</h2><p>前端angular上传图片到服务器，必然是ajax请求的方式，将图片数据转成二进制流传给后端了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">url:string=<span class="string">"http://localhost:8080/upload"</span>;</div><div class="line">progress:number=<span class="number">0</span>;<span class="comment">//进度</span></div><div class="line"></div><div class="line">uploadPic(formData):<span class="built_in">Promise</span>&lt;any&gt; &#123;</div><div class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest(),</div><div class="line">      </div><div class="line">     </div><div class="line">      <span class="comment">//封装xhr请求</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Pormise(resolve,reject)&#123;</div><div class="line">          xhr.upload.addEventListener(<span class="string">'progress'</span>, (e: ProgressEvent) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span>(e.lengthComputable) &#123;</div><div class="line">            <span class="keyword">this</span>.progress = <span class="built_in">Math</span>.round((e.loaded * <span class="number">100</span>) / e.total);</div><div class="line">          &#125;</div><div class="line">          &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">          xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">              <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                  <span class="keyword">this</span>.progress = <span class="number">0</span>;</div><div class="line">                  </div><div class="line">                  <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)</div><div class="line">                      resolve(&#123;<span class="attr">xhr</span>: xhr, <span class="attr">files</span>: <span class="keyword">this</span>.files&#125;);</div><div class="line">                  <span class="keyword">else</span></div><div class="line">                      reject(&#123;<span class="attr">xhr</span>: xhr, <span class="attr">files</span>: <span class="keyword">this</span>.files&#125;);</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line">          </div><div class="line">          xhr.open(<span class="string">'POST'</span>, <span class="keyword">this</span>.url, <span class="literal">true</span>);</div><div class="line">          <span class="comment">//jwt后端验证，设置请求头部信息，解决跨域</span></div><div class="line">          xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"Basic "</span> + localStorage.getItem(<span class="string">'jwt'</span>));</div><div class="line">          </div><div class="line">          xhr.send(formData);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>将以上方法写到一个<code>upload-file.servie.ts</code>中。然后其他地方就可以使用<code>uploadFileService.uploadPic()</code>方法调用了。</p>
<p>这里后端代码忽略，后端Java或者nodejs都很简单，接收文件二进制流保存，或者是上传到百度云与阿里云。</p>
<h2 id="信息发送按钮处理"><a href="#信息发送按钮处理" class="headerlink" title="信息发送按钮处理"></a>信息发送按钮处理</h2><p>发送信息处理，需要处理好文本信息和图片信息两种。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * dataURL to blob, ref to https://gist.github.com/fupslot/5015897</div><div class="line"> * @param dataURI</div><div class="line"> * @returns &#123;Blob&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURItoBlob</span>(<span class="params">dataURI</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">var</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(byteString.length);</div><div class="line">    <span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</div><div class="line">        ia[i] = byteString.charCodeAt(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ab], &#123;<span class="attr">type</span>: mimeString&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 发送消息</div><div class="line">     * @param taskValue</div><div class="line">     */</div><div class="line">    sendMessage() &#123;</div><div class="line">        <span class="keyword">let</span> dateTime = <span class="keyword">this</span>.dateFromat.FormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        <span class="keyword">let</span> value = $(<span class="string">'#message-boxID'</span>).html();</div><div class="line">        <span class="keyword">let</span> isImg = value.includes(<span class="string">'&lt;img'</span>);</div><div class="line">        <span class="comment">//如果是图片信息</span></div><div class="line">        <span class="keyword">if</span> (isImg) &#123;</div><div class="line">            <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">            <span class="keyword">let</span> dataURL=<span class="string">""</span>;</div><div class="line">            <span class="keyword">let</span> src=$(value)[<span class="number">0</span>].src;</div><div class="line">            <span class="comment">//图片截图粘贴</span></div><div class="line">            <span class="keyword">if</span>(src.includes(<span class="string">'data:images'</span>))&#123;</div><div class="line">                dataURL=src;</div><div class="line">                <span class="keyword">let</span> blob = dataURItoBlob(dataURL);</div><div class="line">                formData.append(<span class="string">'file'</span>, blob);</div><div class="line">            </div><div class="line">            <span class="comment">//图片本地选择</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(src.includes(<span class="string">'blob:http'</span>))&#123;</div><div class="line">                 <span class="comment">//files是图片选择时保存的图片文件对象，见onFileSelect方法</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.files.length; i++) &#123;</div><div class="line">                    formData.append(<span class="string">'file'</span>, <span class="keyword">this</span>.files[i], <span class="keyword">this</span>.files[i].name);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//调用上传图片方法</span></div><div class="line">            <span class="keyword">this</span>.uploadFileService.uploadPic(formData).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                <span class="comment">//上传成功，do something</span></div><div class="line">                <span class="built_in">console</span>.log(result);</div><div class="line">                </div><div class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'图片上传失败'</span>+err);</div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//非图片信息，文本发送</span></div><div class="line">            <span class="comment">//this.submitMessage(value);</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IM聊天图片发送有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截图粘贴到信息框后点击发送&lt;/li&gt;
&lt;li&gt;选择本地图片发送&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片剪切粘贴，使用QQ或者其他平台的截图功能，截图后粘贴&lt;code&gt;Ctrl+V&lt;/code&gt;，这个过程需要获取粘贴板上的图片数据，并在页面中展示，也就是将图片数据创建一个img元素，就可以显示出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Angular" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/Angular/"/>
    
    
      <category term="Angular" scheme="http://giscafer.com/tags/Angular/"/>
    
      <category term="im" scheme="http://giscafer.com/tags/im/"/>
    
  </entry>
  
  <entry>
    <title>Cafe主题v1.0发布</title>
    <link href="http://giscafer.com/2017/04/16/cafe-release-1/"/>
    <id>http://giscafer.com/2017/04/16/cafe-release-1/</id>
    <published>2017-04-15T16:44:26.000Z</published>
    <updated>2017-04-15T16:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>cafe主题发布v1.0版本，更新内容有：</p>
<ul>
<li><p>添加网易云跟帖插件系统  （<a href="http://cafe.giscafer.com/2017/04/14/gentie-test/" target="_blank" rel="external">查看使用方式</a>）</p>
</li>
<li><p>添加 mathjax(latex公式) 支持 （<a href="http://cafe.giscafer.com/2017/04/15/mathjax-test/" target="_blank" rel="external">查看文章演示</a>）</p>
</li>
<li><p>添加友情链接widget</p>
</li>
<li><p>修复已经样式问题</p>
</li>
</ul>
<p>github:<a href="https://github.com/giscafer/hexo-theme-cafe" target="_blank" rel="external">https://github.com/giscafer/hexo-theme-cafe</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cafe主题发布v1.0版本，更新内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加网易云跟帖插件系统  （&lt;a href=&quot;http://cafe.giscafer.com/2017/04/14/gentie-test/&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hexo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/Hexo/"/>
    
    
      <category term="cafe" scheme="http://giscafer.com/tags/cafe/"/>
    
  </entry>
  
  <entry>
    <title>React搭建百度前端技术学院习题演示SPA</title>
    <link href="http://giscafer.com/2017/03/05/ife-course-demo/"/>
    <id>http://giscafer.com/2017/03/05/ife-course-demo/</id>
    <published>2017-03-05T13:34:53.000Z</published>
    <updated>2017-03-05T14:00:02.803Z</updated>
    
    <content type="html"><![CDATA[<p>百度前端技术学院提供了很多前端编程练习题，大概看了一些，觉得对于初学者是有很大帮助的，非初学者也可以学习巩固一下基础。毕竟书上的练习题可能比较乏味。</p>
<p>在离职时间内，时间充裕的时候搭建了该SPA，无聊的时候刷刷题。访问地址：<a href="http://ife.giscafer.com" target="_blank" rel="external">http://ife.giscafer.com</a></p>
<p><img src="/static/img/ife-course-demo.jpg" alt="PC端预览"></p>
<p>Github源码：<a href="https://github.com/giscafer/ife-course-demo" target="_blank" rel="external">https://github.com/giscafer/ife-course-demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度前端技术学院提供了很多前端编程练习题，大概看了一些，觉得对于初学者是有很大帮助的，非初学者也可以学习巩固一下基础。毕竟书上的练习题可能比较乏味。&lt;/p&gt;
&lt;p&gt;在离职时间内，时间充裕的时候搭建了该SPA，无聊的时候刷刷题。访问地址：&lt;a href=&quot;http://ife
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="ife" scheme="http://giscafer.com/tags/ife/"/>
    
      <category term="前端习题" scheme="http://giscafer.com/tags/%E5%89%8D%E7%AB%AF%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>react-ponitor</title>
    <link href="http://giscafer.com/2017/02/04/react-ponitor/"/>
    <id>http://giscafer.com/2017/02/04/react-ponitor/</id>
    <published>2017-02-04T10:35:11.000Z</published>
    <updated>2017-03-05T14:00:07.196Z</updated>
    
    <content type="html"><![CDATA[<p>近期学习react，故使用 React 重写原先使用 vue.js v1.x开发的 <a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">Ponitor</a></p>
<p><img src="https://raw.githubusercontent.com/giscafer/react-ponitor/master/public/screenshot.png" alt="screenshot.png"></p>
<p>Github 源码：<a href="https://github.com/giscafer/react-ponitor" target="_blank" rel="external">https://github.com/giscafer/react-ponitor</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期学习react，故使用 React 重写原先使用 vue.js v1.x开发的 &lt;a href=&quot;https://github.com/giscafer/Ponitor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ponitor&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="React" scheme="http://giscafer.com/tags/React/"/>
    
      <category term="redux" scheme="http://giscafer.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>React 与 Redux 实践 —— 城市筛选面板</title>
    <link href="http://giscafer.com/2017/01/20/react-redux-cityfilter-demo/"/>
    <id>http://giscafer.com/2017/01/20/react-redux-cityfilter-demo/</id>
    <published>2017-01-20T10:51:20.000Z</published>
    <updated>2017-01-20T10:58:55.616Z</updated>
    
    <content type="html"><![CDATA[<p>Redux 是 JavaScript <code>状态容器</code>，提供<code>可预测化</code>的状态管理。Redux的出现，可以让你构建一致化的应用，运行与不同的环境。</p>
<p>要点</p>
<ul>
<li>应用中所有的 state 都以一个对象树的形式存储在一个单一的 store 中；</li>
<li>唯一改变 store 的办法是触发 action，一个描述发生什么的对象；</li>
<li>为了描述 action 如何改变 state 树，你需要编写 reducers；  </li>
<li>为了UI组件 components 状态无关，你需要编写 containers 来负责管理数据和业务逻辑。</li>
</ul>
<p>所以，关于组件部分，明智的做法是在最外层上使用 Redux ，然后通过 <code>Props</code> 方式传值给内部子组件，使得components UI组件仅仅是<code>pure render</code>（纯展示）</p>
<a id="more"></a>
<p><strong>containers 与 components 区别对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">containers（容器组件）</th>
<th style="text-align:center">components（UI组件）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Location</strong></td>
<td style="text-align:center">最顶层，路由处理</td>
<td style="text-align:center">中间和子组件</td>
</tr>
<tr>
<td><strong>与Redux联系</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td><strong>读取数据</strong></td>
<td style="text-align:center">从 Redux 获取 state</td>
<td style="text-align:center">从 props 获取数据</td>
</tr>
<tr>
<td><strong>修改数据</strong></td>
<td style="text-align:center">从 Redux 派发 action</td>
<td style="text-align:center">从 props 调用回调函数</td>
</tr>
</tbody>
</table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>通过一个城市筛选面板来理解 React + Redux 的使用</p>
<p><img src="/static/img/react-redux-cityfilter-demo.gif" alt=""></p>
<p>示例demo：<a href="http://giscafer.com/react-demo-list/#/citypanel">http://giscafer.com/react-demo-list/#/citypanel</a></p>
<p>源码：<a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p><strong>编写 React 应用的时候，会有一个大致的开发步骤</strong>：</p>
<ul>
<li>构建应用状态树 state 结构</li>
<li>编写 action （描述已发生事件的普通对象，所有修改 state 的操作都必须通过触发action）</li>
<li>编写 reducers （描述 action 如何改变 state tree）</li>
<li>编写 UI组件 components （纯组件，无状态，所有参数通过Props传，可复用性）</li>
<li>编写 容器组件 containers （用来负责管理数据和业务逻辑，react-redux 链接components）</li>
<li>通过 createStore 创建store，通过 Provider 包装根组件</li>
</ul>
<h2 id="Action-创建常量和函数"><a href="#Action-创建常量和函数" class="headerlink" title="Action 创建常量和函数"></a>Action 创建常量和函数</h2><p>定好<code>state tree</code>后，编写actions</p>
<p><code>actions.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * citypanel actions</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_VISIBILITY_FILTER = <span class="string">'SET_VISIBILITY_FILTER'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setVisibilityFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: SET_VISIBILITY_FILTER, filter &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h2><p>当应用很大时，可以将它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分，因为 reducer 只是函数，你可以控制它们被调用的顺序，传入附加数据，甚至编写可复用的 reducer 来处理一些通用任务，如分页器</p>
<p><code>reducer 和 action 是好基友</code></p>
<p><code>./reducers/cityList.jsx</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; SET_VISIBILITY_FILTER &#125; <span class="keyword">from</span> <span class="string">'../../actions/citypanel/actions'</span>;</div><div class="line"><span class="keyword">import</span> &#123; cityData &#125; <span class="keyword">from</span> <span class="string">'./cityData.js'</span>;</div><div class="line"><span class="keyword">const</span> initialState = cityData.filter(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="string">'citynum'</span>])</div><div class="line"><span class="built_in">console</span>.log(initialState)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">cityList</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> SET_VISIBILITY_FILTER:</div><div class="line">            <span class="keyword">return</span> cityFilter(action.filter)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cityFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> cityData.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (filter === <span class="string">'特大'</span> || !filter) &#123;</div><div class="line">            <span class="keyword">if</span> (item[<span class="string">'citynum'</span>]) &#123;</div><div class="line">                <span class="keyword">return</span> item;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item[<span class="string">'pinyin'</span>][<span class="number">0</span>].toLocaleUpperCase() === filter &amp;&amp; !item[<span class="string">'citynum'</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> item;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(filter)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>./reducers/index.jsx</code> 组合所有reducers （多个的时候用）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> cityList <span class="keyword">from</span> <span class="string">'./cityList'</span></div><div class="line"></div><div class="line"><span class="comment">//使用redux的combineReducers方法将所有reducer打包起来</span></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    cityList</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</div></pre></td></tr></table></figure>
<h2 id="UI组件components"><a href="#UI组件components" class="headerlink" title="UI组件components"></a>UI组件components</h2><p>宗旨就是<code>pure function</code></p>
<p><code>./components/cityList.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;cityList = []&#125;) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">'city-list'</span>&gt;</span></span></div><div class="line">            &#123;</div><div class="line">                cityList.map((city,index) =&gt; &#123;</div><div class="line">                    if(city)&#123;</div><div class="line">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'left textCenter'</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">data-name</span>=<span class="string">&#123;city.name&#125;</span>&gt;</span>&#123;city.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>./components/letterFilter.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;onFilterChange&#125;) =&gt; &#123;</div><div class="line">    <span class="comment">// let letterArr = new Array(26);</span></div><div class="line">    <span class="comment">// for (var i = 0; i &lt; 26; i++) &#123;</span></div><div class="line">    <span class="comment">//     letterArr[i]=String.fromCharCode((65 + i));</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// console.log(letterArr)</span></div><div class="line">    <span class="keyword">let</span> letterArr=[<span class="string">'特大'</span>,<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>];</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">'city-index'</span>&gt;</span></span></div><div class="line">            &#123;</div><div class="line">                letterArr.map((letter,i) =&gt; &#123;</div><div class="line">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'left textCenter on_mouseover'</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123; onFilterChange(letter) &#125;&#125;&gt;&#123;letter&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外层组件组合letterFilter与cityList子组件，<code>./components/index.jsx</code></p>
<p>//此处的函数参数cityList与setVisibilityFilter是由容器组件传输</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> LetterFilter <span class="keyword">from</span> <span class="string">'./letterFilter'</span>;</div><div class="line"><span class="keyword">import</span> CityList <span class="keyword">from</span> <span class="string">'./cityList'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'../../styles/citypanel/index.less'</span>;</div><div class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'../nav/Nav'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;cityList = [], setVisibilityFilter&#125;) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div className='city-panel'&gt;</div><div class="line">             &lt;Nav /&gt;</div><div class="line">            &lt;CityList cityList=&#123;cityList&#125; /&gt;</div><div class="line">            &lt;LetterFilter onFilterChange=&#123;setVisibilityFilter&#125; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="容器组件containers"><a href="#容器组件containers" class="headerlink" title="容器组件containers"></a>容器组件containers</h2><p>主要是通过<code>react-redux</code>中间件提供的<code>connect</code>方法来链接<code>containers</code>与<code>components</code>，而<code>connect</code> 方法提供了两个方法 <code>mapStateToProps</code> 与 <code>mapDispatchToProps</code>，它们定义了 UI 组件的业务逻辑。前者负责输入逻辑。<br><code>mapStateToProps</code>将 state 映射到 UI 组件的参数（Props），<code>mapDispatchToProps</code>负责输出逻辑，即将用户对 UI 组件的操作映射成 Action，也可以通过<code>bindActionCreators</code>方法将<code>action</code>的所有方法绑定到props上。</p>
<p><code>./containers/App.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> cityPanelIndex <span class="keyword">from</span> <span class="string">'../../components/citypanel/index'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ctiyActions <span class="keyword">from</span> <span class="string">'../../actions/citypanel/actions'</span></div><div class="line"></div><div class="line"><span class="comment">//将state.cityList绑定到props的cityList</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">cityList</span>:state.cityList</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将action的所有方法绑定到props上</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> bindActionCreators(ctiyActions,dispatch);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(cityPanelIndex)</div></pre></td></tr></table></figure>
<h2 id="注册store"><a href="#注册store" class="headerlink" title="注册store"></a>注册store</h2><p>将 state 和 action 交给 redux 来管理</p>
<p><code>./stores/createStore.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../reducers/citypanel'</span></div><div class="line"><span class="comment">//applyMiddleware来自redux可以包装 store 的 dispatch</span></div><div class="line"><span class="comment">//thunk作用是使action创建函数可以返回一个function代替一个action对象</span></div><div class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</div><div class="line">  thunk</div><div class="line">)(createStore)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> store = createStoreWithMiddleware(reducer, initialState)</div><div class="line">  <span class="comment">//热替换选项</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</div><div class="line">    <span class="comment">// Enable Webpack hot module replacement for reducers</span></div><div class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'../reducers/citypanel'</span>, () =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> nextReducer = <span class="built_in">require</span>(<span class="string">'../reducers/citypanel'</span>)</div><div class="line">      store.replaceReducer(nextReducer)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> store</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="App主文件入口"><a href="#App主文件入口" class="headerlink" title="App主文件入口"></a>App主文件入口</h2><p>最终Provider包装主组件（containers）</p>
<p><code>Main.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * citypanel主入口</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../../containers/citypanel/App'</span></div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'../../stores/configureStore'</span></div><div class="line"><span class="keyword">const</span> store = configureStore()</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个react + redux 应用完成了</p>
<p>演示：<a href="http://giscafer.com/react-demo-list/#/citypanel">http://giscafer.com/react-demo-list/#/citypanel</a></p>
<p>源码：<a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p>（完）</p>
<hr>
<p><em>参考链接</em></p>
<ul>
<li><a href="http://www.jianshu.com/p/a83a99f68b5d" target="_blank" rel="external">http://www.jianshu.com/p/a83a99f68b5d</a></li>
<li><a href="https://lewis617.github.io/2016/01/19/r2-counter/" target="_blank" rel="external">https://lewis617.github.io/2016/01/19/r2-counter/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redux 是 JavaScript &lt;code&gt;状态容器&lt;/code&gt;，提供&lt;code&gt;可预测化&lt;/code&gt;的状态管理。Redux的出现，可以让你构建一致化的应用，运行与不同的环境。&lt;/p&gt;
&lt;p&gt;要点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用中所有的 state 都以一个对象树的形式存储在一个单一的 store 中；&lt;/li&gt;
&lt;li&gt;唯一改变 store 的办法是触发 action，一个描述发生什么的对象；&lt;/li&gt;
&lt;li&gt;为了描述 action 如何改变 state 树，你需要编写 reducers；  &lt;/li&gt;
&lt;li&gt;为了UI组件 components 状态无关，你需要编写 containers 来负责管理数据和业务逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，关于组件部分，明智的做法是在最外层上使用 Redux ，然后通过 &lt;code&gt;Props&lt;/code&gt; 方式传值给内部子组件，使得components UI组件仅仅是&lt;code&gt;pure render&lt;/code&gt;（纯展示）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="React" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/React/"/>
    
    
      <category term="React" scheme="http://giscafer.com/tags/React/"/>
    
      <category term="redux" scheme="http://giscafer.com/tags/redux/"/>
    
      <category term="react-redux" scheme="http://giscafer.com/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>1.Two Sum</title>
    <link href="http://giscafer.com/2017/01/13/leetcode-two-sum/"/>
    <id>http://giscafer.com/2017/01/13/leetcode-two-sum/</id>
    <published>2017-01-13T12:24:00.000Z</published>
    <updated>2017-01-13T13:04:29.249Z</updated>
    
    <content type="html"><![CDATA[<p><em>原题地址：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">https://leetcode.com/problems/two-sum/</a></em></p>
<blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:<br>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
</blockquote>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>正常两次循环，循环次数可能多，只要数组不是很大，效率还是很高的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @param &#123;number&#125; target</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'twoSum'</span>)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line"></div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nums.length&amp;&amp; i!=j; j++) &#123;</div><div class="line">    		<span class="keyword">if</span>(nums[j]+nums[i]===target)&#123;</div><div class="line">    			<span class="built_in">console</span>.timeEnd(<span class="string">'twoSum'</span>)</div><div class="line">    			<span class="keyword">var</span> result=[i,j].sort();</div><div class="line">    			<span class="keyword">return</span> result</div><div class="line">    		&#125;</div><div class="line">    	&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>边循环边使用对象存储</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> twoSum2 = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'twoSum2'</span>)</div><div class="line">	<span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">    	<span class="keyword">if</span>(obj[nums[i+<span class="string">''</span>]]!==<span class="literal">null</span> &amp;&amp; obj[nums[i+<span class="string">''</span>]]!==<span class="literal">undefined</span>)&#123;</div><div class="line">    		<span class="keyword">var</span> result=[obj[nums[i]],i];</div><div class="line">    		 <span class="built_in">console</span>.timeEnd(<span class="string">'twoSum2'</span>)</div><div class="line">    		<span class="keyword">return</span> result;</div><div class="line">    	&#125;</div><div class="line">    	obj[target-nums[i]]=i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> result2=[];</div><div class="line">    <span class="keyword">return</span> result2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>测试结果，建议使用更大的数组测试，才会看到<code>twoSum2</code>方法效率高</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>;</div><div class="line"><span class="comment">// var nums = [11, 15, 9,1,1,3,1,11, 15, 9,1,1,3,1,1,1,1,1,2,7,3], target = 9;</span></div><div class="line">twoSum(nums,target);</div><div class="line">twoSum2(nums,target);</div></pre></td></tr></table></figure>
<p>经测试，在小数组时，<code>twoSum方法</code>比<code>twoSum2</code>快很多，当数组变大时，<code>twoSum2</code>算法更快</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原题地址：&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/two-sum/&lt;/a&gt;&lt;/em&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="LeetCode" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/LeetCode/"/>
    
    
      <category term="leetcode" scheme="http://giscafer.com/tags/leetcode/"/>
    
      <category term="算法" scheme="http://giscafer.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何组件化开发WebGIS系统</title>
    <link href="http://giscafer.com/2017/01/10/modularization-webgis/"/>
    <id>http://giscafer.com/2017/01/10/modularization-webgis/</id>
    <published>2017-01-10T15:09:31.000Z</published>
    <updated>2017-01-12T14:04:06.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="啰嗦两句"><a href="#啰嗦两句" class="headerlink" title="啰嗦两句"></a>啰嗦两句</h3><p>前面聊过<a href="https://zhuanlan.zhihu.com/p/24780835?refer=viseye" target="_blank" rel="external">《探讨如何使用流行的前端技术开发WebGIS系统》</a>，本篇基于此继续介绍。</p>
<p><em>不用再讨论兼容IE6，7了，2017年，没人再用了。。。。哈哈哈</em></p>
<p>本人目前正业余开发一套框架，后端Java+前端Angular+个人封装的UI+个人封装的地图组件，东西很多，一个人搞，这是一个漫长的过程。这也是为什么最近再Github上如此活跃的原因，也因为最近一段时间没加过班。。。除了玩游戏就只能写代码了。。</p>
<p>=&gt;<a href="https://github.com/giscafer" target="_blank" rel="external">giscafer (Nickbing Lao)</a></p>
<h3 id="一、后端完善的Restful接口设计有利前端组件封装"><a href="#一、后端完善的Restful接口设计有利前端组件封装" class="headerlink" title="一、后端完善的Restful接口设计有利前端组件封装"></a>一、后端完善的Restful接口设计有利前端组件封装</h3><p>比如知乎的文章链接</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>zhuanlan.zhihu.com<span class="regexp">/p/</span><span class="number">24780835</span></div></pre></td></tr></table></figure>
<p>可以看作一个GET请求，接口p，参数为24780835。这个接口可以查所有文章。</p>
<p>做WebGIS系统，后端框架，接口设计好用，能提升前端开发的效率，并且可以针对接口封装一些增删改查的组件，在angular里边，你可以封装成指令或者是controller，然后其他业务controller集成此类，就继承了该类的所有方法了。比如应用里边我封装了增删改查的操作，只要是单表的CRUD（增查改删），完全不需要写多余的CRUD代码，只需要修改一下HTML和传参。如下代码可以改为一个通用的父类Controller。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Test controller</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> popFormCtrl <span class="keyword">from</span> <span class="string">'./popForm.ctrl.js'</span>;</div><div class="line"><span class="keyword">import</span> popFormTemp <span class="keyword">from</span> <span class="string">'./popForm.html'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCtrl</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// dataServiceSrv, uiNotification为依赖注入服务，其中uiNotification为laoui封装ui控件</span></div><div class="line">    <span class="keyword">constructor</span>($scope, dataServiceSrv, uiNotification, $uiModal) &#123;</div><div class="line">        <span class="string">"ngInject"</span>;<span class="comment">//ES6写angularjs指定写法；作用是依赖注入上边的$scope, dataServiceSrv, uiNotification模块</span></div><div class="line">        <span class="keyword">this</span>._$scope = $scope;</div><div class="line">        <span class="keyword">this</span>._$uiModal = $uiModal;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv = dataServiceSrv;</div><div class="line">        <span class="keyword">this</span>._uiNotification = uiNotification;</div><div class="line">        <span class="keyword">this</span>.tableName = <span class="string">'student'</span>;</div><div class="line">        <span class="keyword">this</span>.title = <span class="string">"测试页"</span>;</div><div class="line">        <span class="comment">//查询标志位</span></div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.deleting = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.isAllChecked = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.table = [];</div><div class="line">        <span class="keyword">this</span>.query();</div><div class="line">        <span class="comment">//过滤器自定义方法 | filter:方法名称</span></div><div class="line">        <span class="keyword">this</span>.filterData=<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">           <span class="keyword">return</span> item._deleted!=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//测试查询</span></div><div class="line">    query() &#123;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="string">"tableName"</span>: <span class="keyword">this</span>.tableName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv.query(params).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (data[<span class="string">'result'</span>].length) &#123;</div><div class="line">                <span class="keyword">this</span>.table = data[<span class="string">'result'</span>];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>._uiNotification.info(<span class="string">'无数据'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//新增</span></div><div class="line">    add() &#123;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'新增'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.openPopForm(params);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修改</span></div><div class="line">    update() &#123;</div><div class="line">        <span class="keyword">let</span> selectedRows = <span class="keyword">this</span>.getSelectedRows();</div><div class="line">        <span class="keyword">if</span> (selectedRows.length !== <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">let</span> options = &#123;</div><div class="line">                <span class="attr">message</span>: <span class="string">'请选中一条记录！'</span>, <span class="attr">positionX</span>: <span class="string">'center'</span>, <span class="attr">positionY</span>: <span class="string">'top'</span>, <span class="attr">delay</span>: <span class="number">2000</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._uiNotification.warning(options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'修改'</span>,</div><div class="line">            <span class="attr">data</span>: selectedRows[<span class="number">0</span>]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.openPopForm(params);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">delete</span>() &#123;</div><div class="line">        <span class="keyword">let</span> selectedRows = <span class="keyword">this</span>.getSelectedRows();</div><div class="line">        <span class="built_in">console</span>.log(selectedRows)</div><div class="line">        <span class="keyword">if</span> (!selectedRows.length) &#123;</div><div class="line">            <span class="keyword">let</span> options = &#123;</div><div class="line">                <span class="attr">message</span>: <span class="string">'请选中需要删除的记录！'</span>, <span class="attr">positionX</span>: <span class="string">'center'</span>, <span class="attr">positionY</span>: <span class="string">'top'</span>, <span class="attr">delay</span>: <span class="number">2000</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._uiNotification.warning(options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> idArr = _.map(selectedRows, <span class="string">'id'</span>);</div><div class="line">        <span class="keyword">let</span> idValues = idArr.join(<span class="string">","</span>);</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">idValues</span>: idValues,</div><div class="line">            <span class="attr">tableName</span>: <span class="keyword">this</span>.tableName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.deleting = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv.deleteByKey(params).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (res[<span class="string">'result'</span>]) &#123;</div><div class="line">                <span class="keyword">this</span>._uiNotification.success(<span class="string">'删除成功!'</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> selectedRows)&#123;</div><div class="line">                    item._deleted=<span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                 <span class="keyword">this</span>._uiNotification.error(<span class="string">'删除失败!'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.deleting = <span class="literal">false</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//通用弹窗</span></div><div class="line">    openPopForm(params = &#123;&#125;) &#123;</div><div class="line">        <span class="keyword">let</span> modalInstance = <span class="keyword">this</span>._$uiModal.open(&#123;</div><div class="line">            <span class="attr">templateUrl</span>: popFormTemp,</div><div class="line">            <span class="attr">controller</span>: popFormCtrl,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'popForm'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'lg'</span>,</div><div class="line">            <span class="attr">backdrop</span>: <span class="string">'static'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">items</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> params;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    selectedAll() &#123;</div><div class="line">        <span class="keyword">this</span>.table.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">            item.checked = <span class="keyword">this</span>.isAllChecked;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    check() &#123;</div><div class="line">        <span class="keyword">this</span>.isAllChecked = !_.some(<span class="keyword">this</span>.table, (item) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> !item.checked;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    selectByClick($event, item) &#123;</div><div class="line">        <span class="keyword">if</span> ($event.target.type !== <span class="string">'checkbox'</span>) &#123;</div><div class="line">            item.checked = !item.checked;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    getSelectedRows() &#123;</div><div class="line">        <span class="keyword">return</span> _.filter(<span class="keyword">this</span>.table, (item) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> item.checked === <span class="literal">true</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/static/img/modularization-webgis1.png" alt=""></p>
<p><img src="/static/img/modularization-webgis2.png" alt=""></p>
<p>可以封装的内容出CRUD外，还包括一些限制控制，通知提示，表单验证等。</p>
<p>因为是angular框架，双向数据绑定，比传统的jqueryUI，easyUI这堆好用的多，这么一来简单的表单页面开发起来就不费任何力气，简单复制模板修改一下就OK。</p>
<h3 id="二、地图工具组件化"><a href="#二、地图工具组件化" class="headerlink" title="二、地图工具组件化"></a>二、地图工具组件化</h3><p>同理，地图工具组件化是必须的。（防转载标记，个人微信公众号：giscafer）</p>
<p>每个WebGIS系统都有这些一模一样的工具：<strong>全屏、放大、缩小、距离测量、面积测量、i键查询、坐标定位</strong> 等等，这些工具可以封装为无平台相关，也就是兼容所有地图js库，不管是ArcGIS API For JavaScript，还是OpenLayers 等，就比如我封装了一个叫 DMap 的地图库，里边大致结构如图：</p>
<p><img src="/static/img/modularization-webgis-dmap.png" alt="DMap库结构图"></p>
<p>在开发系统时，我选择了<code>Mapbox</code>作为地图js库，我在<code>dmap_config.js</code>文件中配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DMAP_JS_TYPE:<span class="string">"MAPBOX"</span></div></pre></td></tr></table></figure>
<p>这时候我可以自动构建打包一套Mapbox的js库（当然和原生库不一样，我封装了一些组件类，下边介绍）。同理我配置<code>DMAP_JS_TYPE:&quot;OL3&quot;</code>，就表示构建OL3组件库。</p>
<p>构建方式用<code>nodejs</code> + <code>webpack</code>等工具开发，类似 <a href="http://echarts.baidu.com/builder.html" target="_blank" rel="external">Echarts的构建方式</a> </p>
<p>然后我把组件库引入我开发的webgis系统。通过无平台相关（这表示和地图 js库无关）接口 Map 创建地图</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">"map"</span>, &#123;</div><div class="line">      <span class="comment">//配置</span></div><div class="line">       projection: <span class="string">"EPSG:900913"</span>,</div><div class="line">       <span class="attr">center</span>: [<span class="number">118.665397</span>, <span class="number">47.6569168</span>],</div><div class="line">       <span class="attr">zoom</span>: <span class="number">5</span></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>另外，地图类型加载也可以封装成，通过配置地图类型比如，天地图OGC_WMTS，还是高德地图AMAP，demo《<a href="https://zhuanlan.zhihu.com/p/24780835?refer=viseye" target="_blank" rel="external">《探讨如何使用流行的前端技术开发WebGIS系统》</a> 就是配置的高德地图。这些地图加载同样封装成无平台相关。</p>
<p>以下是组件封装后使用demo截图：</p>
<p><img src="/static/img/modularization-webgis3.png" alt=""></p>
<p><img src="/static/img/modularization-webgis4.png" alt=""></p>
<p>最终，封装好后，以后做项目不用任何代码就可以构建一个webgis系统雏形出来，这个雏形系统带有基本的表单增删改查组件、全屏、放大、缩小、距离测量、面积测量、i键查询、坐标定位 等直接可用的地图组件。</p>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>在WebGIS系统开发里边，有较多的表单业务，封装成组件开发是最方便的，也可以找网上的一些开源库做修改，定制成自己通用的才是最好用的。</p>
<p>已不从事gis行业，业余有外包机会或者兼职机会希望可以接一下，所以自己定制一个前端后端一整套框架，一方面学习，一方面积累技术。工作量很大，有时间一步一步慢慢来，并且业余还得学前端技术，React Native是下一个学习目标。</p>
<p>此外，框架设计的时候，考虑到不加载dmap地图库的时候，就是一个完全纯净的业务系统，可以用来做其他网站，比如企业站点、博客等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;啰嗦两句&quot;&gt;&lt;a href=&quot;#啰嗦两句&quot; class=&quot;headerlink&quot; title=&quot;啰嗦两句&quot;&gt;&lt;/a&gt;啰嗦两句&lt;/h3&gt;&lt;p&gt;前面聊过&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24780835?refer=viseye&quot;&gt;《探讨如何使用流行的前端技术开发WebGIS系统》&lt;/a&gt;，本篇基于此继续介绍。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;不用再讨论兼容IE6，7了，2017年，没人再用了。。。。哈哈哈&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本人目前正业余开发一套框架，后端Java+前端Angular+个人封装的UI+个人封装的地图组件，东西很多，一个人搞，这是一个漫长的过程。这也是为什么最近再Github上如此活跃的原因，也因为最近一段时间没加过班。。。除了玩游戏就只能写代码了。。&lt;/p&gt;
&lt;p&gt;=&amp;gt;&lt;a href=&quot;https://github.com/giscafer&quot;&gt;giscafer (Nickbing Lao)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、后端完善的Restful接口设计有利前端组件封装&quot;&gt;&lt;a href=&quot;#一、后端完善的Restful接口设计有利前端组件封装&quot; class=&quot;headerlink&quot; title=&quot;一、后端完善的Restful接口设计有利前端组件封装&quot;&gt;&lt;/a&gt;一、后端完善的Restful接口设计有利前端组件封装&lt;/h3&gt;&lt;p&gt;比如知乎的文章链接&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;zhuanlan.zhihu.com&lt;span class=&quot;regexp&quot;&gt;/p/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;24780835&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看作一个GET请求，接口p，参数为24780835。这个接口可以查所有文章。&lt;/p&gt;
&lt;p&gt;做WebGIS系统，后端框架，接口设计好用，能提升前端开发的效率，并且可以针对接口封装一些增删改查的组件，在angular里边，你可以封装成指令或者是controller，然后其他业务controller集成此类，就继承了该类的所有方法了。比如应用里边我封装了增删改查的操作，只要是单表的CRUD（增查改删），完全不需要写多余的CRUD代码，只需要修改一下HTML和传参。如下代码可以改为一个通用的父类Controller。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="WebGIS" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/WebGIS/"/>
    
    
      <category term="WebGIS" scheme="http://giscafer.com/tags/WebGIS/"/>
    
      <category term="gis" scheme="http://giscafer.com/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>2016年末总结</title>
    <link href="http://giscafer.com/2016/12/23/2016-year-end-summary/"/>
    <id>http://giscafer.com/2016/12/23/2016-year-end-summary/</id>
    <published>2016-12-23T12:55:29.000Z</published>
    <updated>2017-03-05T14:09:13.665Z</updated>
    
    <content type="html"><![CDATA[<p>年底了，毕业两年半，也就是工作2年半了，times flying！！！</p>
<p>2016年，变化比较大的有三方面：工作地点由北京换到广州、脱离单身dog、gis行业转互联网（勉强算，都是做编程开发）。</p>
<a id="more"></a>
<h3 id="北京——广州"><a href="#北京——广州" class="headerlink" title="北京——广州"></a>北京——广州</h3><p><strong>北京</strong> 毕业北漂[求技]之旅，刚好两年，不长不短，体验到了北京大都市的生活节奏和人情风俗。总体来说都挺好的，除了雾霾天气比较严重外，其他给我的印象都不错；比如北京的街道很干净，公民总体素质高，社会基础设施，安全保障等，但最重要的还属于北京资源丰富。[资源]包括教育、医疗、科技等方方面面，it行业创业公司和氛围都很好，大型it公司也很多，竞争激烈，然而我并不能收益很多，两年时间是不够的。</p>
<p>我简单谈一下北漂的感受。实话说，程序猿北漂是相对轻松一点的吧，起薪高，尽管北京消费租房是昂贵的，还是能支付的起。比如租房2k月租左右的预付，能找到不错的，一个月2k的吃喝也足了（往低的说，你合租可以找1k~1.5k的房子，吃的话一天50也够了，一个月也就1.5k）。所以说，程序猿北漂是可以的，具体看个人了，可能还会买买衣服，电子产品这些，最后能不能省钱是一回事，反正我没剩钱。刚毕业，技术放在第一，养活自己就可以了。想在北京定居不容易，户口和房价是个问题。</p>
<p><strong>广州</strong>  刚来广州的时候，感受和北京差别比较大有地铁安检，只能说好简单的安检，也没西安安检严格；街道不够干净，垃圾比较多（非树叶）；租房，不好租，广州整租的很多，很少单独租主卧这种的，整租的话也贵，3k~4k 一个月（当然我指的是稍微交通便利的地带）。来广州我租了一间单间，1.7k的月租（北京我租的是次卧1.4k），附近吃喝和北京相比没差别，所以消费是和北京几乎等同的了，但是广州薪资和北京相比是有 20%~50% 浮动的差距的，房价慢慢涨到2W+每平米的水平。另外一个是交通不方便的问题，广州人多，交通运输量不够，还是地铁线设计有问题。早班时，地铁根本不能坐（广州3号线），挤地铁能活着不容易啊。</p>
<p>广州也有好的地方，好处就不说了。作为南方人，广州是最好的选择吧，起码离家近，能常回家看看！</p>
<h3 id="GIS——互联网前端"><a href="#GIS——互联网前端" class="headerlink" title="GIS——互联网前端"></a>GIS——互联网前端</h3><p>GIS专业毕业，我能选择的只有两个方向：一、数据处理工程师；二、软件开发工程师；因为我也只会这两个了。选开发那是肯定的，因为我一向不喜欢用软件搞数据，天天重复做着差不多的事情。开发也是天天写代码，但是写的代码不一样，思考的东西也不一样，发展方向也广阔，看的是技术能力和学习能力。</p>
<p>离开GIS行业是有原因的，在第一家公司里做GIS项目有10多个了，感受比较深的是，做这类政务系统，要求很低，安全性和稳定性以及易用性等。从前端来讲，优化是谈不上的，只要把功能做出来，没bug就OK。我觉得这不是前端所追求的，作为前端开发方向发展的我，选择离开是正确的。</p>
<h3 id="走着并追赶在前端的潮流之上"><a href="#走着并追赶在前端的潮流之上" class="headerlink" title="走着并追赶在前端的潮流之上"></a>走着并追赶在前端的潮流之上</h3><p>这几年，前端很火，变化的也多。前些天，一些大牛又在微博撕X，辩论XX技术好不好，有没有意义。作为前端小菜，我觉得新推出的技术、框架是要学习了解一下的，不管用不用上，学习了解一下没啥大不了，只有学习才能正确体验到框架是否真正好用，适用什么场景。实际上，有几年工作经验的程序猿，学一个框架，也就是一个周末而已就差不多了解其使用、适用场景了，就如入门一门新编程语言，可能也只需要一两周的时间。所以在前端混的，有选择的学习一下一些新技术是必要的。在前端潮流中享受与受伤吧~~o(╯□╰)o，听说2017年，新版webkit内核浏览器将支持模块化js，也就是commonjs，AMD这些直接支持了，再过几年淘汰老版本浏览器后就不需要编译了。。一切都在变化之中，或者已经在变化的路上！</p>
<p>这一年，做了很多小应用和demo，目前在用Angular封装一套前端ui框架，后端用JFinal封装一套接口服务，目的是学习和方便以后快速定制开发系统使用。想拥有自己的框架或能拿出手的东西，有时间和机会也接一下小项目、网站做等。</p>
<p>如果你的项目有意思想找人一起开发维护，或者纯技术交流学习，我在这Github：<a href="https://github.com/giscafer" target="_blank" rel="external">giscafer</a></p>
<p>以下是敲击记录（<em>我觉得github日历上满满的绿的用户，多数是前端开发方向</em>）</p>
<p><img src="/static/img/2016-github.png" alt="2016年Github提交记录"></p>
<p>2017年继续有计划地学习，计划开发一个上线运营的App，技术用<code>React Native</code>还是<code>Angualr Ionic2</code>待定，内容定位暂定为GIS学习方向。有兴趣的同学可以一起玩~</p>
<p>最后引入 [转自微博@tombkeeper]的话来总结：</p>
<p><strong>从事任何技术研究，不知道该干什么的时候，就问自己四个问题</strong></p>
<pre><code>- 这个方向上最新进展是什么？ 都知道吗？
- 这个方向上最著名的专家有哪些？他们的研究都看过吗？
- 这个方向上最著名的技术社区有哪些？精华帖都看过一遍吗？
- 这个方向上最重要的文章、工具有哪些？文章都看过吗？工具都分析过吗？
- 你有对象了吗？（针对程序猿）
</code></pre><h3 id="脱离单身dog"><a href="#脱离单身dog" class="headerlink" title="脱离单身dog"></a>脱离单身dog</h3><p>现在终于可以专心啪啪啪~敲着键盘，宅着写代码了。。。女票说想学测试，正在指导学习的路上，学不成也无所谓，能更好的了解计算机和互联网，不会那么电脑文盲，但也可能不小心入坑了呢。。。</p>
<h3 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h3><p>2016年没去几个城市，只有北京、陕西、广州、福州（出差一个月）。生活质量期待以后的提升，计划一些旅游什么的，为了目标努力吧！！！</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>看书时间是不少的，非技术书籍寥寥无几，这方面是需要改善的地方，2017年开始计划着时间多读一下文学类的书籍陶冶身心。</p>
<h3 id="科技时代"><a href="#科技时代" class="headerlink" title="科技时代"></a>科技时代</h3><p>读大学那会儿，团购、O2O火起来；刚毕业那会团购死一大片、P2P网贷流行又迅速倒一片；今年流行是人工智能和VR，这应该是长久的，未来人类一直要做的努力，可以造福人类。互联网可能每隔5年会有一个颠覆性变化，从事it行业，平时工作学习编程以外，是需要多了解一下其他的东西，拓展自己的视野，前瞻性，提升自身价值的能力值和宽度。</p>
<h3 id="2017年愿景"><a href="#2017年愿景" class="headerlink" title="2017年愿景"></a>2017年愿景</h3><ul>
<li>多陪父母，多打电话</li>
<li>工作上期望有个好的技术氛围，多认识一些爱学习讨论的coder，更加努力，更快成长</li>
<li>开心的玩</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年底了，毕业两年半，也就是工作2年半了，times flying！！！&lt;/p&gt;
&lt;p&gt;2016年，变化比较大的有三方面：工作地点由北京换到广州、脱离单身dog、gis行业转互联网（勉强算，都是做编程开发）。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="日记" scheme="http://giscafer.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码理解React组件生命周期过程</title>
    <link href="http://giscafer.com/2016/12/15/react-component-lifecycle/"/>
    <id>http://giscafer.com/2016/12/15/react-component-lifecycle/</id>
    <published>2016-12-14T16:30:30.000Z</published>
    <updated>2016-12-15T14:16:26.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>React Component整个生命周期分为三大块：<strong>初始化——存在期（更新）——销毁清理</strong></p>
<h3 id="首次实例化-调用方法"><a href="#首次实例化-调用方法" class="headerlink" title="首次实例化 调用方法"></a>首次实例化 调用方法</h3><ul>
<li>getDefaultProps()</li>
<li>getInitialState()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()()</li>
</ul>
<p><em>ES6写法中则为</em></p>
<ul>
<li>constructor()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
<h3 id="存在期-调用方法"><a href="#存在期-调用方法" class="headerlink" title="存在期 调用方法"></a>存在期 调用方法</h3><p><strong> <code>props</code> 或 <code>state</code>状态改变</strong></p>
<ul>
<li>componentWillReceiveProps()</li>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
<h3 id="销毁清理-调用方法"><a href="#销毁清理-调用方法" class="headerlink" title="销毁清理 调用方法"></a>销毁清理 调用方法</h3><ul>
<li>componentWillUnmount()</li>
</ul>
<a id="more"></a>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>创建一个<code>LifeCycleComponent.js</code>组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">    'use strict'</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'../nav/Nav'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        fpLog(<span class="string">'初始化调用:constructor()'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在完成首次渲染之前调用，此时仍可以修改组件的state</span></div><div class="line">    componentWillMount()&#123;</div><div class="line">        fpLog(<span class="string">'完成渲前调用:componentWillMount()'</span>)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        fpLog(<span class="string">'渲染时调用:render()'</span>);</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Nav</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://facebook.github.io/react/docs/react-component.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Component Specs and Lifecycle<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    shouldComponentUpdate(nextProps, nextState)&#123;</div><div class="line">        <span class="comment">//该方法用来做一下性能优化，默认是返回true，返回false则阻止render()调用，跳过后续的生命周期方法</span></div><div class="line">        <span class="comment">//在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</span></div><div class="line">        fpLog(<span class="string">'当渲染新的props或state调用:shouldComponentUpdate()'</span>);</div><div class="line">        fpLog2(<span class="string">'&lt;span style="color:blue"&gt;原始props.text='</span>+<span class="keyword">this</span>.props.text+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">        fpLog2(<span class="string">'&lt;span style="color:red"&gt;改变后的props.text='</span>+nextProps.text+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.info!==nextProps.text)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    componentWillUpdate()&#123;</div><div class="line">         <span class="comment">//该方法中不允许更新props或state，也就是更新也是无效的</span></div><div class="line">        fpLog(<span class="string">'接收到新的props或者state后，进行渲染之前调用:componentWillUpdate()'</span>);</div><div class="line">    &#125;</div><div class="line">    componentDidUpdate()&#123;</div><div class="line">        fpLog(<span class="string">'完成渲染新的props或者state后调用，此时可以访问到新的DOM元素:componentDidUpdate()'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//真实DOM渲染后调用</span></div><div class="line">    componentDidMount()&#123;</div><div class="line">        fpLog(<span class="string">'真实DOM渲染后调用:componentDidMount()'</span>)</div><div class="line">    &#125;</div><div class="line">    componentWillReceiveProps(nextProps)&#123;</div><div class="line">        fpLog(<span class="string">'组件接收到新的props时调用:componentWillReceiveProps()---'</span>+nextProps.text)</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        fpLog(<span class="string">'组件销毁前调用：componentWillUnmount()'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">LifeCycleComponent.dispalyName=<span class="string">'LifeCycleComponentDemo'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> LifeCycleComponent;</div></pre></td></tr></table></figure>
<p><strong>父组件入口文件<code>Main.js</code></strong>，改组件主要用来动态改变<code>state</code>值后，观察<code>LifeCycleComponent</code>组件的生命周期方法的调用情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> LifeCycleApp <span class="keyword">from</span> <span class="string">'./LifeCycle'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycleMainComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">info</span>: <span class="string">'The React Component Lifecycle'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">LifeCycleApp</span> <span class="attr">text</span>=<span class="string">&#123;this.state.info&#125;</span> /&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        //定时更新state的值</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                info: 'React组件生命周期'</div><div class="line">            &#125;)</div><div class="line">        &#125;, 2000)</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                info: '再次改变state值'</div><div class="line">            &#125;)</div><div class="line">        &#125;, 5000)</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LifeCycleMainComponent.defaultProps = &#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default LifeCycleMainComponent;</div></pre></td></tr></table></figure>
<p>最后输出日志为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 初始化调用<span class="symbol">:constructor</span>()</span></div><div class="line">-<span class="ruby"> 完成渲前调用<span class="symbol">:componentWillMount</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 真实DOM渲染后调用<span class="symbol">:componentDidMount</span>()</span></div><div class="line">-<span class="ruby"> 组件接收到新的props时调用<span class="symbol">:componentWillReceiveProps</span>()---React组件生命周期</span></div><div class="line">-<span class="ruby"> 当渲染新的props或state调用<span class="symbol">:shouldComponentUpdate</span>()</span></div><div class="line">&gt;&gt;&gt; 原始props.text=The React Component Lifecycle</div><div class="line">&gt;&gt;&gt; 改变后的props.text=React组件生命周期</div><div class="line">-<span class="ruby"> 接收到新的props或者state后，进行渲染之前调用<span class="symbol">:componentWillUpdate</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 完成渲染新的props或者state后调用，此时可以访问到新的DOM元素<span class="symbol">:componentDidUpdate</span>()</span></div><div class="line">-<span class="ruby"> 组件接收到新的props时调用<span class="symbol">:componentWillReceiveProps</span>()---再次改变state值</span></div><div class="line">-<span class="ruby"> 当渲染新的props或state调用<span class="symbol">:shouldComponentUpdate</span>()</span></div><div class="line">原始props.text=React组件生命周期</div><div class="line">改变后的props.text=再次改变state值</div><div class="line">-<span class="ruby"> 接收到新的props或者state后，进行渲染之前调用<span class="symbol">:componentWillUpdate</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 完成渲染新的props或者state后调用，此时可以访问到新的DOM元素<span class="symbol">:componentDidUpdate</span>()</span></div></pre></td></tr></table></figure>
<p>结果截图：</p>
<p><img src="https://raw.githubusercontent.com/giscafer/react-demo-list/master/src/images/lifecycle.png" alt="React Component lifeCycle"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p>[参考链接]</p>
<ul>
<li><a href="https://facebook.github.io/react/docs/react-component.html" target="_blank" rel="external">React.Component</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;p&gt;React Component整个生命周期分为三大块：&lt;strong&gt;初始化——存在期（更新）——销毁清理&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;首次实例化-调用方法&quot;&gt;&lt;a href=&quot;#首次实例化-调用方法&quot; class=&quot;headerlink&quot; title=&quot;首次实例化 调用方法&quot;&gt;&lt;/a&gt;首次实例化 调用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;getDefaultProps()&lt;/li&gt;
&lt;li&gt;getInitialState()&lt;/li&gt;
&lt;li&gt;componentWillMount()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;ES6写法中则为&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor()&lt;/li&gt;
&lt;li&gt;componentWillMount()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;存在期-调用方法&quot;&gt;&lt;a href=&quot;#存在期-调用方法&quot; class=&quot;headerlink&quot; title=&quot;存在期 调用方法&quot;&gt;&lt;/a&gt;存在期 调用方法&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;props&lt;/code&gt; 或 &lt;code&gt;state&lt;/code&gt;状态改变&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componentWillReceiveProps()&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate()&lt;/li&gt;
&lt;li&gt;componentWillUpdate()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidUpdate()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;销毁清理-调用方法&quot;&gt;&lt;a href=&quot;#销毁清理-调用方法&quot; class=&quot;headerlink&quot; title=&quot;销毁清理 调用方法&quot;&gt;&lt;/a&gt;销毁清理 调用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;componentWillUnmount()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="React" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/React/"/>
    
    
      <category term="React组件" scheme="http://giscafer.com/tags/React%E7%BB%84%E4%BB%B6/"/>
    
      <category term="React组件生命周期" scheme="http://giscafer.com/tags/React%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-cafe</title>
    <link href="http://giscafer.com/2016/12/11/hexo-theme-cafe/"/>
    <id>http://giscafer.com/2016/12/11/hexo-theme-cafe/</id>
    <published>2016-12-11T03:40:35.000Z</published>
    <updated>2017-03-05T13:59:52.031Z</updated>
    
    <content type="html"><![CDATA[<p>尝试自己定制一个Hexo博客主题<code>Cafe</code>，Cafe 主题旨在追求简约、操作简单、阅读舒适度，详细介绍和源码见<a href="https://github.com/giscafer/hexo-theme-cafe" target="_blank" rel="external">https://github.com/giscafer/hexo-theme-cafe</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试自己定制一个Hexo博客主题&lt;code&gt;Cafe&lt;/code&gt;，Cafe 主题旨在追求简约、操作简单、阅读舒适度，详细介绍和源码见&lt;a href=&quot;https://github.com/giscafer/hexo-theme-cafe&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="cafe" scheme="http://giscafer.com/tags/cafe/"/>
    
      <category term="Hexo" scheme="http://giscafer.com/tags/Hexo/"/>
    
      <category term="项目" scheme="http://giscafer.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>WebGL Earth台风监测web应用webglearth-typhoon</title>
    <link href="http://giscafer.com/2016/10/16/webglearth-typhoon-project/"/>
    <id>http://giscafer.com/2016/10/16/webglearth-typhoon-project/</id>
    <published>2016-10-16T01:14:39.000Z</published>
    <updated>2017-03-05T14:01:12.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了一天时间，开发了一个基于<strong>WebGL Eerth</strong>的台风监测系统，写这个web应用的目的有两个：</p>
<p>1、我在github上创建了<a href="https://github.com/viseye" target="_blank" rel="external">@viseye</a>组织已经一段时间，但是迟迟没有项目，于是近期打算写一个</p>
<p>2、另一个原因是我再知乎开了<a href="https://zhuanlan.zhihu.com/viseye" target="_blank" rel="external">可视化编程</a>专栏，文章偶尔需要继续更新，就得找些东西来写</p>
<p>相关地址：</p>
<ul>
<li><p>github @viseye：<a href="https://github.com/viseye" target="_blank" rel="external">https://github.com/viseye</a></p>
</li>
<li><p>知乎可视化编程专栏：<a href="https://zhuanlan.zhihu.com/viseye" target="_blank" rel="external">https://zhuanlan.zhihu.com/viseye</a></p>
</li>
<li><p>VisEye Website: <a href="http://viseye.xyz" target="_blank" rel="external">http://viseye.xyz</a></p>
</li>
<li><p>个人微信公众号id：giscafer</p>
</li>
</ul>
<a id="more"></a>
<h2 id="台风监测web应用webglearth-typhoon"><a href="#台风监测web应用webglearth-typhoon" class="headerlink" title="台风监测web应用webglearth-typhoon"></a>台风监测web应用webglearth-typhoon</h2><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://raw.githubusercontent.com/viseye/webglearth-typhoon/master/public/images/screenshot.png" alt="image"></p>
<p><img src="https://raw.githubusercontent.com/viseye/webglearth-typhoon/master/public/images/show-compact2.gif" alt="image"></p>
<h3 id="Demo-Url"><a href="#Demo-Url" class="headerlink" title="Demo Url"></a>Demo Url</h3><p>在线demo:<a href="http://viseye.xyz/webglearth-typhoon/" target="_blank" rel="external">http://viseye.xyz/webglearth-typhoon/</a> </p>
<p><strong>请使用支持WebGL HTML5的浏览器打开，IE10+或新版Google Chrome等</strong></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p><strong>1、服务端</strong></p>
<p>  服务端使用nodejs搭建服务器，提供前端数据请求的api接口，目前部署于BAE</p>
</li>
</ul>
<p><code>app.js</code>代码如下，主要是使用express搭建一个简单的server</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * app entry</div><div class="line"> */</div><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> Typhoon=<span class="built_in">require</span>(<span class="string">'node-typhoon'</span>);</div><div class="line"><span class="keyword">const</span> app=express();</div><div class="line"></div><div class="line">app.set(<span class="string">'port'</span>,(process.env.PORT || <span class="number">3000</span>));</div><div class="line"></div><div class="line">app.use(<span class="string">''</span>,express.static(path.join(__dirname,<span class="string">'public'</span>)));</div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;));</div><div class="line"></div><div class="line"><span class="comment">// Additional middleware which will set headers that we need on each request.</span></div><div class="line">app.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span> &#123;</div><div class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</div><div class="line">    <span class="comment">// Disable caching so we'll always get the latest comments.</span></div><div class="line">    res.setHeader(<span class="string">'Cache-Control'</span>, <span class="string">'no-cache'</span>);</div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line"><span class="comment">//get real-time typhoon information </span></div><div class="line">app.get(<span class="string">'/api/typhoonActivity'</span>,(req,res)=&gt;&#123;</div><div class="line">	Typhoon.typhoonActivity().then(<span class="function"><span class="params">info</span>=&gt;</span>&#123;</div><div class="line">		res.send(info);</div><div class="line">	&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">		res.send(err);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//get historical typhoon information </span></div><div class="line">app.get(<span class="string">'/api/typhoonList'</span>,(req,res)=&gt;&#123;</div><div class="line">	<span class="keyword">let</span> year=<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">	Typhoon.typhoonList(year).then(<span class="function"><span class="params">info</span>=&gt;</span>&#123;</div><div class="line">		res.send(info);</div><div class="line">	&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">		res.send(err);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(app.get(<span class="string">'port'</span>),()=&gt;&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Server started: http://localhost:'</span>+app.get(<span class="string">'port'</span>)+<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><strong>2、中间件 node-typhoon</strong></li>
</ul>
<p>中间件说的是<code>nodejs</code>的<code>middleware</code>，<code>webglearth-typhoon</code>使用了个人自己封装的<code>node-typhoon</code>（已发布到npm），提供了获取实时台风的接口，以及历史台风信息的接口，目前版本是<code>v1.0.0</code>，后期会更新。</p>
<p><em>如下数据结果是今天（2016年10月15日11:53:33）获取的台风信息，两个台风从太平洋方向过来</em></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"enname"</span>: <span class="string">"SARIKA"</span>,</div><div class="line">    <span class="attr">"lat"</span>: <span class="string">"14.40"</span>,</div><div class="line">    <span class="attr">"lng"</span>: <span class="string">"124.30"</span>,</div><div class="line">    <span class="attr">"movedirection"</span>: <span class="string">"西北西"</span>,</div><div class="line">    <span class="attr">"movespeed"</span>: <span class="string">"22"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"莎莉嘉"</span>,</div><div class="line">    <span class="attr">"power"</span>: <span class="string">"12"</span>,</div><div class="line">    <span class="attr">"pressure"</span>: <span class="string">"970"</span>,</div><div class="line">    <span class="attr">"radius10"</span>: <span class="string">"100"</span>,</div><div class="line">    <span class="attr">"radius7"</span>: <span class="string">"220"</span>,</div><div class="line">    <span class="attr">"speed"</span>: <span class="string">"35"</span>,</div><div class="line">    <span class="attr">"strong"</span>: <span class="string">"台风"</span>,</div><div class="line">    <span class="attr">"tfid"</span>: <span class="string">"201621"</span>,</div><div class="line">    <span class="attr">"time"</span>: <span class="string">"2016-10-15 11:00:00"</span>,</div><div class="line">    <span class="attr">"timeformate"</span>: <span class="string">"10月15日11时"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"enname"</span>: <span class="string">"HAIMA"</span>,</div><div class="line">    <span class="attr">"lat"</span>: <span class="string">"8.20"</span>,</div><div class="line">    <span class="attr">"lng"</span>: <span class="string">"143.90"</span>,</div><div class="line">    <span class="attr">"movedirection"</span>: <span class="string">"北西"</span>,</div><div class="line">    <span class="attr">"movespeed"</span>: <span class="string">"22"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"海马"</span>,</div><div class="line">    <span class="attr">"power"</span>: <span class="string">"8"</span>,</div><div class="line">    <span class="attr">"pressure"</span>: <span class="string">"998"</span>,</div><div class="line">    <span class="attr">"radius10"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"radius7"</span>: <span class="string">"200"</span>,</div><div class="line">    <span class="attr">"speed"</span>: <span class="string">"18"</span>,</div><div class="line">    <span class="attr">"strong"</span>: <span class="string">"热带风暴"</span>,</div><div class="line">    <span class="attr">"tfid"</span>: <span class="string">"201622"</span>,</div><div class="line">    <span class="attr">"time"</span>: <span class="string">"2016-10-15 08:00:00"</span>,</div><div class="line">    <span class="attr">"timeformate"</span>: <span class="string">"10月15日8时"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>更多见：<a href="https://www.npmjs.com/package/node-typhoon" target="_blank" rel="external">https://www.npmjs.com/package/node-typhoon</a></p>
<ul>
<li><strong>3、前端 webglearth2</strong></li>
</ul>
<p> 官方介绍：</p>
<p> webglearth2 - WebGL Earth 2 - the source code of the project,There is an extremely easy to use JavaScript API - fully mimicking LeafletJS.</p>
<p>webglearth2是一个开源虚拟地球web应用程序，可以运行在任何支持HTML5 WebGL标准的web浏览器上，以及移动设备,如iPhone,iPad或基于Android的手机也会支持</p>
<p>传送门：<a href="https://github.com/webglearth/webglearth2" target="_blank" rel="external">https://github.com/webglearth/webglearth2</a></p>
<p><strong>webglearth-typhoon实现整个思路:</strong></p>
<p>前端加载虚拟三维球+地图后，通过调用nodejs服务器中<code>node-typhoon</code>提供的Api获取台风信息，数据返回前端后，组装好，通过marker和气泡弹窗展示信息的方式加载到地图。This is all</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下用到的技术</p>
<ul>
<li>JavaScript+HTML5+CSS 网页必须的，不多说</li>
<li>JavaScript新标准ES6，源码可能用了一些ES6的新特性书写</li>
<li>WebGL </li>
<li>LeafletJS 一个地图JavaScript库</li>
<li>Nodejs 服务端</li>
</ul>
<p>往上看一下，好像都是JavaScript~~~</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>1、加上历史台风查询展示；</p>
<p>2、实时台风路径情况</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>Github：<a href="https://github.com/viseye/webglearth-typhoon" target="_blank" rel="external">https://github.com/viseye/webglearth-typhoon</a></p>
<p><strong>爱学习、爱分享的同学，可关注个人微信公众号（id:giscafer）</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;花了一天时间，开发了一个基于&lt;strong&gt;WebGL Eerth&lt;/strong&gt;的台风监测系统，写这个web应用的目的有两个：&lt;/p&gt;
&lt;p&gt;1、我在github上创建了&lt;a href=&quot;https://github.com/viseye&quot;&gt;@viseye&lt;/a&gt;组织已经一段时间，但是迟迟没有项目，于是近期打算写一个&lt;/p&gt;
&lt;p&gt;2、另一个原因是我再知乎开了&lt;a href=&quot;https://zhuanlan.zhihu.com/viseye&quot;&gt;可视化编程&lt;/a&gt;专栏，文章偶尔需要继续更新，就得找些东西来写&lt;/p&gt;
&lt;p&gt;相关地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;github @viseye：&lt;a href=&quot;https://github.com/viseye&quot;&gt;https://github.com/viseye&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;知乎可视化编程专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/viseye&quot;&gt;https://zhuanlan.zhihu.com/viseye&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VisEye Website: &lt;a href=&quot;http://viseye.xyz&quot;&gt;http://viseye.xyz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;个人微信公众号id：giscafer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="WebGIS" scheme="http://giscafer.com/tags/WebGIS/"/>
    
      <category term="WebGL" scheme="http://giscafer.com/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>Git批处理|git-batch-file-builder</title>
    <link href="http://giscafer.com/2016/08/28/project-git-batch-file-builder/"/>
    <id>http://giscafer.com/2016/08/28/project-git-batch-file-builder/</id>
    <published>2016-08-28T14:44:18.000Z</published>
    <updated>2017-03-05T13:59:05.468Z</updated>
    
    <content type="html"><![CDATA[<p>编写此工具的原因是工作上遇到数十个工程，需要一个个git clone到本地，所以想使用工具替代重复的操作。</p>
<p>在<code>生成bat文件</code>时，需要允许浏览器弹窗下载文件，如下图：</p>
<p><img src="https://raw.githubusercontent.com/giscafer/git-batch-file-builder/master/allowpopwin.jpg" alt=""></p>
<p><strong>使用技术栈：</strong></p>
<ul>
<li>AngularJS 1.0.7+</li>
<li>Bootstrap 2.3.2+</li>
<li>Node.js</li>
</ul>
<p>github工程：<a href="https://github.com/giscafer/git-batch-file-builder" target="_blank" rel="external">https://github.com/giscafer/git-batch-file-builder</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写此工具的原因是工作上遇到数十个工程，需要一个个git clone到本地，所以想使用工具替代重复的操作。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;生成bat文件&lt;/code&gt;时，需要允许浏览器弹窗下载文件，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githu
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="git批处理" scheme="http://giscafer.com/tags/git%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>前端面试笔记</title>
    <link href="http://giscafer.com/2016/08/10/the-interveiw-for-a-second-job/"/>
    <id>http://giscafer.com/2016/08/10/the-interveiw-for-a-second-job/</id>
    <published>2016-08-10T09:02:41.000Z</published>
    <updated>2016-12-14T16:48:30.874Z</updated>
    
    <content type="html"><![CDATA[<p>面试邀请很多，最后只面试了4个，一方面心累了，一方面想通过新的平台再加强一下自己，今后再次去尝试。<br><a id="more"></a></p>
<h3 id="2016-8-4-下午"><a href="#2016-8-4-下午" class="headerlink" title="2016-8-4 下午"></a>2016-8-4 下午</h3><p>下午，面试了本周第一家公司（这也是两年以来，第二次面对面的面试，第一次是北京的老东家，一干就干了2年整），这次面试的是一家做闪购的公司，公司办公地理位置好，环境不错，主要做的是App产品，去了才知道招聘的前端就主要是App的前端，这也是我最弱的地方了，一直做PC端的前端，在今年的6月份，离职前两个月，才接手一个ionic+angularjs相关的H5 App开发，功能模块的开发，当时时间紧张，所有的时间都花费在功能模块的开发，界面UI这些都是用现成的ionic的样式或者bootstrap样式；也就是没有设计美化UI，直接开发功能。<br>这是传统行业的特点，开发的时候都优先功能第一。</p>
<p>一直以来，我的App前端UI方向可以说是没有实践过的，给出一个设计图，通过HTML/CSS来仿真出来是有点困难，因为在老东家，这些都被美工、UI设计师包揽了。我能做的是在他们设计好的成品上进行简单的修改和调整，我是属<code>于偏JS方向的前端开发工程师</code></p>
<p><strong>面试过程：</strong><br>一、首先，填写个人资料，然后可能有笔试（前台给我拿了Linux运维的笔试题，猜想可能没准备前端笔试题目，所以我就没有参加笔试吧）。</p>
<p>二、然后，来了两人面试，一个负责技术提问，问了一些前端相关的问题，还有一些页面适配等问题；问的前端问题我是都会的，答得可能不好而已吧，我属于一个不善于表述的……但是问了手机端的页面适配，CSS相关的问题的话，我就捉急了，简单的可以，再深一点那就不行了，毕竟实践少，也没机会，业余学习也没注重。</p>
<p><strong>其他问题：</strong><br>1、JavaScript实现继承的方式有哪些；<br>2、call/apply的区别；<br>3、闭包了解；<br>4、对AMD、CMD规范的认识和区别；</p>
<p>三、最后，来了一个人，可能是技术负责相关人员，进来叫我简单的自我介绍一下，我就两句话就介绍完了，o(╯□╰)o，说了自己的意图而已。<br>这个面试官有3个问题：<br>1、一个网页打开比较慢的时候，你怎么去排除问题，会怀疑哪里出了问题？怎么解决这些问题？<br>2、如何清除浏览器的脏缓存？<br>3、你觉得你比别人优越在哪？</p>
<p>四、最终，hr进来大致了解一下情况，问一下以前的薪资，目前期望的薪资，个人情况和以前公司的大致情况等内容。</p>
<p><strong>总结：</strong><br>面试体验：怎个面试过程比较友善，面试官态度很好，最后都会问一下有没有想了解的问题<br>个人方面缺陷总结：<br>1、切片相关的技能，要加强，加强CSS技能<br>2、手机端相关的规范，布局、排版加强了解，最好是通过开发实践去学习<br>3、加强面试技巧，让自己会的都能表达出来，展示自己与别人不同的一面</p>
<h3 id="2016-8-5-下午"><a href="#2016-8-5-下午" class="headerlink" title="2016-8-5 下午"></a>2016-8-5 下午</h3><p>满满的面试安排，都推掉了，周二台风，一周就两个面试，早上都睡懒觉了，明天周末，又要休息两天；这不紧不慢的找工作，没谁了。。。<br>今天下午14:00面试，是一家做政务相关OA产品的公司，和老东家很详细啊，去了才清楚是做传统软件的。</p>
<p>面试流程：<br>一、填写表格；</p>
<p>二、hr面试，简单了解一下情况；</p>
<p>三、1道题上机，递归实现一个无限层级菜单（做不出来，囧~~，CSS实现样式效果是很大的硬伤，瞬间没心情了）</p>
<p>四、没做出来也继续和前端小组负责人面试，大致说了一些他们公司目前的工作情况，问了好几次我有没有要了解的问题，我都说没有。。。。</p>
<p>因为没有心情了，也没想问什么问题，最后问了几个简单的JavaScript基础问题；</p>
<p>1、js继承，call,apply使用</p>
<p>2、jquery的$.click和$.on(‘click’)方式绑定的区别，html的onclick属性和addEventListener绑定点击事件的区别；</p>
<p>3、jquery源码中的$.extend和fn.extend两者区别和$.extend是如何接收参数的。</p>
<p>4、如何对一篇文章全文检索某个字并高亮；</p>
<p>5、有没有使用过jquery的$.proxy方法，此方法的作用</p>
<p>五、技术负责人面完，我直接走了，我以为可以走了。都说好通知联系的；座上地铁后，HR打电话来说，经理想对我面试，可以商量一下薪资问题，能不能回来？我说不回去了……如果薪资不能满足简历要求，那就不联系了吧。。。其实按理还是回去比较好，出于礼貌，或者可以说是技术人员面试完，没说让我再坐一下，已经和我说如果可以，考虑什么时间入职，我说下下周一，然后就走了，挂我咯，主要还是不想回去，因为工作内容太像老东家，想换种工作模式。。。（完）</p>
<h3 id="2016-8-8-上午"><a href="#2016-8-8-上午" class="headerlink" title="2016-8-8 上午"></a>2016-8-8 上午</h3><p>今天是周一，上午去面试一家做汽车相关App的公司，办公环境很好，只是位置交通和宿舍之间交通不方便，步行很久。这家公司招聘的前端主要是做App页面和一些活动展示页，要求是CSS+JQuery+HTML5精通，能随手写出一个jquery插件，比如照片轮播插件等，这也完全是我的弱项。面试随意问了一些，看简历情况提问，问了如何设计一个照片轮播插件；apply/call区别，promise最后的处理，如何判断一个方法是否属于这个类等。然后就没然后了……叫我回来好好补一下CSS+HTML5这些，才能转前端，终归到底，还是要求偏向CSS的前端工程师……</p>
<h3 id="2016-8-8-下午"><a href="#2016-8-8-下午" class="headerlink" title="2016-8-8 下午"></a>2016-8-8 下午</h3><p>下午面试，是一家北京公司，广州分公司和亿迅合作做项目的，去了亿迅工作大厦面试，工作环境一般；流程是先笔试后面试；<br>笔试大概题目（以下就大概描述方向）：<br><strong>JavaScript基础问题：</strong><br>1、JavaScript操作CSS的float属性left（注意IE的区别）<br>2、正则判断一个字符串是否是Email<br>3、一道JavaScript题目，写出执行结果（考点主要是一些变量域+语句执行顺序等）<br>4、什么是闭包？写出一个闭包的例子。<br>5、add(2)(3)(4)的执行结果为9，写出函数体。<br><strong>JQuery问题：</strong><br>6、你是否了解jquery的$.ready方法？它是如何实现的？</p>
<p>7、你是否了解jquery的$.Deferred对象？它是用来解决什么问题？</p>
<p>8、一道插件题，说设计一个tab标签的话，你会提供是吗接口，给出什么功能，如果用户频繁的切换，会造成什么问题？怎么解决？<br><strong>Angular问题</strong><br>9、MVVM是什么？</p>
<p>10、谈谈Controller、Factory/Service、Filter的作用和区别？</p>
<p>11、不同的Controller直接是如何通信（传值）的？</p>
<p>12、请写出你Angular项目的目录结构？</p>
<p><strong>扩展题</strong></p>
<p>13、你还关注什么前沿的技术？谈谈他们的优势。</p>
<p>以上是笔试的大概内容，一共是三页题目，如果JavaScript基础牢，jquery熟悉，然后源码研究了解过的话，题目是不难的。angular考点也是基础问题。<br>面试官面试很快，估计是比较忙，赶时间。过来叫我自我介绍一下，然后问做过什么项目，简单说一下。问GET/POST在Restful中的区别，angular的MVVM的理解，<br>然后就没问多少，问一下期待薪资，然后就结束了。</p>
<h3 id="个人总结："><a href="#个人总结：" class="headerlink" title="个人总结："></a>个人总结：</h3><p>1、首先，离开帝都回广州发展，个人是裸辞，加上广州这边没认识的人，更没有程序猿的人脉；完全是靠自己回来闯，主要还是带着女票回来。来广州的时候，先主要解决租房子问题，租房子的过程，女朋友也一边去面试，两次面试两次都通过，实在厉害，最后确定了一家公司。最后我们用四天的时间找到了房子租，每个月1700的房租，找到房子后，我就开始网上投简历……</p>
<p>2、简历我选择了在拉勾网和前程无忧上放，拉钩的简历投过去反应太慢，有反应了等回复也需要好几天（所以建议简历提前投），那这样我就放更长的假期了；<br>前程无忧我大概投了5、6个公司，然后等消息，最终情况是，我选择投简历的公司都没有回应。但是，在前程无忧上刚放简历一天，就每天有十多个HR电话打过来， 前面的几天都在接电话，安排面试时间，主要的问题是，HR通过简单的公司介绍我都没能了解完全是个什么样子的公司，我不想不清楚是什么公司就去面试，避免浪费时间，迫不得已，我把前程无忧上的简历关闭掉了。</p>
<p>3、一共可能有20多个面试电话，GIS的也有好些个，GIS的面试邀请我是直接拒绝的，理由是不想再做GIS方向，因为传统的GIS行业+给政府做的项目、系统，都很随意，有点像堆功能似得，和个人追求相悖。刚开始面试也是有点懒散，起初安排早上的面试都没去，原因是睡懒觉+下大雨+有点远。于是我第一周面试只面试了一家……</p>
<p>4、第二周，我觉得不应该那么任性了，已经无业好几周了，觉得无聊，最终尝试了几个互联网前端岗位后，都要求CSS+HTML5比较高，高强度还原PS页面+兼容各个终端，自己胜任不了，以前关注重点都在JavaScript上了，CSS太弱，偏JavaScript，但是没接到偏JS前端的面试邀请呀。</p>
<p>5、目前的公司是用Angular+ES6的开发模式，用到Nodejs等，和自己之前学习的有共同部分，只是前端岗位没有要求去做CSS+HTML5那种高还原PS美工页面，打算先干着然后业余加技能，学精。</p>
<p><strong>6、学习目标：在现有工作胜任后，加强CSS+HTML5，以及精通JQuery插件书写，能手写CSS，高强度还原PS设计稿，兼容各个终端，加强HTML5 APP方向（这是理想的计划，目前自己还是偏向JS的前端开发,JS这边也要加强）</strong></p>
<h3 id="给跳槽的前端同学们建议："><a href="#给跳槽的前端同学们建议：" class="headerlink" title="给跳槽的前端同学们建议："></a>给跳槽的前端同学们建议：</h3><p>1、能不裸辞尽量别裸辞，提前投简历</p>
<p>2、简历不需要太多的装饰，只需要列出自己熟练掌握的技能，工作经验内容+项目列表，最重要的是，能提供项目或者作品展示最后（起码前端来说是最好的）</p>
<p>3、基础要牢固，框架的源码要了解</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试邀请很多，最后只面试了4个，一方面心累了，一方面想通过新的平台再加强一下自己，今后再次去尝试。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="工作" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="前端面试" scheme="http://giscafer.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>自制Echarts地图数据 mapshaper-plus</title>
    <link href="http://giscafer.com/2016/06/06/echarts-data-map-project/"/>
    <id>http://giscafer.com/2016/06/06/echarts-data-map-project/</id>
    <published>2016-06-06T03:32:47.000Z</published>
    <updated>2017-03-05T14:00:40.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mapshaper-plus"><a href="#mapshaper-plus" class="headerlink" title="mapshaper-plus"></a>mapshaper-plus</h1><p>基于<a href="https://github.com/mbloch/mapshaper" target="_blank" rel="external">mapshaper</a>对geojson地图数据的坐标信息进行压缩编码，并提供可直接生成压缩编码后的echarts map数据格式</p>
<a id="more"></a>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://giscafer.github.io/mapshaper-plus/" target="_blank" rel="external">演示demo</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><strong>介绍</strong> ——<a href="https://github.com/mbloch/mapshaper" target="_blank" rel="external">mapshaper</a>可以将多种数据格式（Shapefile, GeoJSON, TopoJSON<br>和 Zip files）导入后，对地图的编辑和导出（Shapefile, GeoJSON, TopoJSON, DSV, SVG），功能强大和简单易用。</p>
<p><code>mapshaper-plus</code>是在<code>mapshaper</code>基础上拓展对地图坐标信息的压缩编码，很大程度上减小了文件的代码行数和字节大小：譬如一个贵州省的数据，原始的<code>geojson</code>数据会在<code>30M</code>左右，但在对坐标信息压缩编码后，仅为<code>1.4M</code>。</p>
<p><strong>背景</strong> ——在做echarts图表统计时，需要自制地图数据，但官方没有提供一个平台可以直接将<code>shp文件</code>转化为压缩后的<code>json</code>或<code>js</code>格式的地图文件，而<code>mapshaper</code>导出的json数据没有压缩，数据量过大。</p>
<p>体验可以访问<a href="https://giscafer.github.io/mapshaper-plus/" target="_blank" rel="external">mapshaper-plus在线demo</a></p>
<h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="https://raw.githubusercontent.com/giscafer/mapshaper-plus/master/images/echarts01.png" alt="导出压缩版的数据"></p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/giscafer/mapshaper-plus" target="_blank" rel="external">https://github.com/giscafer/mapshaper-plus</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mapshaper-plus&quot;&gt;&lt;a href=&quot;#mapshaper-plus&quot; class=&quot;headerlink&quot; title=&quot;mapshaper-plus&quot;&gt;&lt;/a&gt;mapshaper-plus&lt;/h1&gt;&lt;p&gt;基于&lt;a href=&quot;https://github.com/mbloch/mapshaper&quot;&gt;mapshaper&lt;/a&gt;对geojson地图数据的坐标信息进行压缩编码，并提供可直接生成压缩编码后的echarts map数据格式&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="mapshaper" scheme="http://giscafer.com/tags/mapshaper/"/>
    
      <category term="echarts地图" scheme="http://giscafer.com/tags/echarts%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图片上传控件angluar-webuploader</title>
    <link href="http://giscafer.com/2016/04/23/project-angluar-webuploader/"/>
    <id>http://giscafer.com/2016/04/23/project-angluar-webuploader/</id>
    <published>2016-04-23T14:47:13.000Z</published>
    <updated>2017-03-05T13:59:36.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近公司做个项目需要使用AngularJS重新封装图片上传控件，支持IE低版本等，之间看过<code>JQuery-File-Upload</code>，尝试使用了一些，觉得文件太多，不好修改；最后使用<a href="http://fex.baidu.com/webuploader" target="_blank" rel="external">webuploader</a>时因为其简洁的界面和使用方便；</p>
<p><code>angluar-webuploader</code>是使用angular指令封装的webuploader demo，弹窗上传图片，缩略图展示列表，翻页效果；支持点击缩略图查看大图详情；</p>
<a id="more"></a>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot.png" alt="screenshot0"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot2.png" alt="screenshot1"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot1.png" alt="screenshot2"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本demo没有给出java后台代码，后台代码也简单，一个文件读写+图片压缩，返回结果参考以下<code>json</code>格式；<br>然后将图片上传接口请求地址在<code>app.js</code>配置后即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">	<span class="string">"status"</span>:<span class="literal">true</span>,<span class="comment">//上传成功状态</span></div><div class="line">	<span class="string">"newName"</span>:<span class="string">"/test/temp/upload/picture/20160422/c0c0b8f7bc574ec88f891ff834b79bab.jpg"</span>,<span class="comment">//原图片路径</span></div><div class="line">	<span class="string">"thumbName"</span>:<span class="string">"/test/temp/upload/picture/20160422/thumb/c0c0b8f7bc574ec88f891ff834b79bab.jpg"</span><span class="comment">//缩略图路径</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>源码地址，欢迎学习交流<br><a href="https://github.com/giscafer/angular-webuploader" target="_blank" rel="external">https://github.com/giscafer/angular-webuploader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;最近公司做个项目需要使用AngularJS重新封装图片上传控件，支持IE低版本等，之间看过&lt;code&gt;JQuery-File-Upload&lt;/code&gt;，尝试使用了一些，觉得文件太多，不好修改；最后使用&lt;a href=&quot;http://fex.baidu.com/webuploader&quot;&gt;webuploader&lt;/a&gt;时因为其简洁的界面和使用方便；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;angluar-webuploader&lt;/code&gt;是使用angular指令封装的webuploader demo，弹窗上传图片，缩略图展示列表，翻页效果；支持点击缩略图查看大图详情；&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="webuploader" scheme="http://giscafer.com/tags/webuploader/"/>
    
      <category term="angluar" scheme="http://giscafer.com/tags/angluar/"/>
    
  </entry>
  
  <entry>
    <title>nodejs链接oracle</title>
    <link href="http://giscafer.com/2016/04/13/node-oracledb-demo/"/>
    <id>http://giscafer.com/2016/04/13/node-oracledb-demo/</id>
    <published>2016-04-13T03:30:17.000Z</published>
    <updated>2017-01-10T15:41:32.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows下node-oracledb环境"><a href="#windows下node-oracledb环境" class="headerlink" title="windows下node-oracledb环境"></a>windows下node-oracledb环境</h2><p>在windows环境下， oracle一直是个麻烦事情，参考官方<a href="https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#instwin" target="_blank" rel="external">环境搭建说明</a><br><a id="more"></a><br>原本就在电脑上安装了<code>oracle11g</code>数据库,<code>VS2013</code>,<code>python2.7</code>，所以，我在环境变量下只需要再添加以下两个变量：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set OCI_LIB_DIR=D:<span class="symbol">\a</span>pp<span class="symbol">\g</span>iscafer<span class="symbol">\p</span>roduct<span class="symbol">\1</span>1.2.0<span class="symbol">\d</span>bhome_1<span class="symbol">\O</span>CI<span class="symbol">\l</span>ib<span class="symbol">\M</span>SVC</div><div class="line">set OCI_INC_DIR=D:<span class="symbol">\a</span>pp<span class="symbol">\g</span>iscafer<span class="symbol">\p</span>roduct<span class="symbol">\1</span>1.2.0<span class="symbol">\d</span>bhome_1<span class="symbol">\O</span>CI<span class="symbol">\i</span>nclude</div></pre></td></tr></table></figure></p>
<pre><code>npm install --save oracle
</code></pre><p><img src="/static/img/node-oracledb.png" alt="node-oracledb.png"></p>
<h2 id="oracle数据库连接"><a href="#oracle数据库连接" class="headerlink" title="oracle数据库连接"></a>oracle数据库连接</h2><p>1、安装<code>node-oracledb</code>完成后，新建一个数据库配置文件<code>dbconfig.js</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">user</span>          : process.env.NODE_ORACLEDB_USER || <span class="string">"scott"</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Instead of hard coding the password, consider prompting for it,</span></div><div class="line">  <span class="comment">// passing it in an environment variable via process.env, or using</span></div><div class="line">  <span class="comment">// External Authentication.</span></div><div class="line">  password      : process.env.NODE_ORACLEDB_PASSWORD || <span class="string">"tiger"</span>,</div><div class="line"></div><div class="line">  <span class="comment">// For information on connection strings see:</span></div><div class="line">  <span class="comment">// https://github.com/oracle/node-oracledb/blob/master/doc/api.md#connectionstrings</span></div><div class="line">  connectString : process.env.NODE_ORACLEDB_CONNECTIONSTRING || <span class="string">"localhost/orcl"</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Setting externalAuth is optional.  It defaults to false.  See:</span></div><div class="line">  <span class="comment">// https://github.com/oracle/node-oracledb/blob/master/doc/api.md#extauth</span></div><div class="line">  externalAuth  : process.env.NODE_ORACLEDB_EXTERNALAUTH ? <span class="literal">true</span> : <span class="literal">false</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2、然后测试数据库连接，建个<code>connect.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oracledb = <span class="built_in">require</span>(<span class="string">'oracledb'</span>);</div><div class="line"><span class="keyword">var</span> dbConfig = <span class="built_in">require</span>(<span class="string">'./dbconfig.js'</span>);</div><div class="line"></div><div class="line">oracledb.getConnection(</div><div class="line">  &#123;</div><div class="line">    <span class="attr">user</span>          : dbConfig.user,</div><div class="line">    <span class="attr">password</span>      : dbConfig.password,</div><div class="line">    <span class="attr">connectString</span> : dbConfig.connectString</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.error(err.message);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection was successful!'</span>);</div><div class="line"></div><div class="line">    connection.release(</div><div class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span></div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="built_in">console</span>.error(err.message);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>3、最后运行<code>connect.js</code>，成功会输出’Connection was successful!’信息</p>
<pre><code>node connect.js
</code></pre><h2 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h2><p>1、<code>npm install --save async</code></p>
<p>2、新建<code>`select.js</code>文件，代码如下（sql语句修改为自己需要查询的表语句即可）</p>
<p>3、<code>node select.js</code>执行即可看到结果，结果分为数据和对象两种处理方式，比较简单</p>
<p>测试结果图：</p>
<p><img src="/static/img/node-oracledb-select.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</div><div class="line"><span class="keyword">var</span> oracledb = <span class="built_in">require</span>(<span class="string">'oracledb'</span>);</div><div class="line"><span class="keyword">var</span> dbConfig = <span class="built_in">require</span>(<span class="string">'./dbconfig.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Properties are applicable to all connections and SQL executions.</span></div><div class="line"><span class="comment">// They can also be set or overridden at the individual execute() call level</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// This script sets outFormat in the execute() call but it could be set here instead:</span></div><div class="line"><span class="comment">// oracledb.outFormat = oracledb.OBJECT;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> doconnect = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">  oracledb.getConnection(</div><div class="line">    &#123;</div><div class="line">      <span class="attr">user</span>          : dbConfig.user,</div><div class="line">      <span class="attr">password</span>      : dbConfig.password,</div><div class="line">      <span class="attr">connectString</span> : dbConfig.connectString</div><div class="line">    &#125;,</div><div class="line">    cb);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dorelease = <span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</div><div class="line">  conn.release(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err)</div><div class="line">      <span class="built_in">console</span>.error(err.message);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Default Array Output Format</span></div><div class="line"><span class="keyword">var</span> doquery_array = <span class="function"><span class="keyword">function</span> (<span class="params">conn, cb</span>) </span>&#123;</div><div class="line">  conn.execute(</div><div class="line">    <span class="string">"SELECT location_id, city FROM locations WHERE city LIKE 'S%' ORDER BY city"</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> cb(err, conn);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"----- Cities beginning with 'S' (default ARRAY output format) --------"</span>);</div><div class="line">        <span class="built_in">console</span>.log(result.rows);</div><div class="line">        <span class="keyword">return</span> cb(<span class="literal">null</span>, conn);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Optional Object Output Format</span></div><div class="line"><span class="keyword">var</span> doquery_object = <span class="function"><span class="keyword">function</span> (<span class="params">conn, cb</span>) </span>&#123;</div><div class="line">  conn.execute(</div><div class="line">    <span class="string">"SELECT location_id, city FROM locations WHERE city LIKE 'S%' ORDER BY city"</span>,</div><div class="line">    &#123;&#125;, <span class="comment">// A bind variable parameter is needed to disambiguate the following options parameter</span></div><div class="line">        <span class="comment">// otherwise you will get Error: ORA-01036: illegal variable name/number</span></div><div class="line">    &#123; <span class="attr">outFormat</span>: oracledb.OBJECT &#125;, <span class="comment">// outFormat can be OBJECT or ARRAY.  The default is ARRAY</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> cb(err, conn);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"----- Cities beginning with 'S' (OBJECT output format) --------"</span>);</div><div class="line">        <span class="built_in">console</span>.log(result.rows);</div><div class="line">        <span class="keyword">return</span> cb(<span class="literal">null</span>, conn);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">async</span>.waterfall(</div><div class="line">  [</div><div class="line">    doconnect,</div><div class="line">    doquery_array,</div><div class="line">    doquery_object</div><div class="line">  ],</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.error(<span class="string">"In waterfall error cb: ==&gt;"</span>, err, <span class="string">"&lt;=="</span>); &#125;</div><div class="line">    <span class="keyword">if</span> (conn)</div><div class="line">      dorelease(conn);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>更多见官方提供的例子：<br><a href="https://github.com/oracle/node-oracledb/tree/master/examples" target="_blank" rel="external">https://github.com/oracle/node-oracledb/tree/master/examples</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;windows下node-oracledb环境&quot;&gt;&lt;a href=&quot;#windows下node-oracledb环境&quot; class=&quot;headerlink&quot; title=&quot;windows下node-oracledb环境&quot;&gt;&lt;/a&gt;windows下node-oracledb环境&lt;/h2&gt;&lt;p&gt;在windows环境下， oracle一直是个麻烦事情，参考官方&lt;a href=&quot;https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#instwin&quot;&gt;环境搭建说明&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="DataBase" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/DataBase/"/>
    
    
      <category term="node-oracledb" scheme="http://giscafer.com/tags/node-oracledb/"/>
    
      <category term="node.js链接oracle" scheme="http://giscafer.com/tags/node-js%E9%93%BE%E6%8E%A5oracle/"/>
    
  </entry>
  
  <entry>
    <title>Ponitor价格监测</title>
    <link href="http://giscafer.com/2016/03/31/project-ponitor/"/>
    <id>http://giscafer.com/2016/03/31/project-ponitor/</id>
    <published>2016-03-31T05:21:01.000Z</published>
    <updated>2017-03-05T13:59:31.051Z</updated>
    
    <content type="html"><![CDATA[<p>开发这个项目的初衷是学习<code>vue.js+webpack</code>构建应用，加上学习<code>ES6</code>之后没有正式在项目里边练习，然后偶然看到一个demo是做app爬虫的，加上本人又有计划入手个单反的想法，于是就有了<a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">Ponitor</a>。</p>
<p>项目支持对天猫、淘宝、和京东进行爬虫，关注一些商品，降价或涨价的时候都推送消息；（话说如果每天都监测商品价格，在双11和双12，会发现有些商家提前提升价格再故意降价的情况，哈哈哈……，只是猜测，不过这情况是会有的吧。），他们的恶劣行为会被<code>Ponitor</code>记录。</p>
<a id="more"></a>
<h2 id="关于商品信息获取"><a href="#关于商品信息获取" class="headerlink" title="关于商品信息获取"></a>关于商品信息获取</h2><p>1、爬虫Apple App是最方便的，一切信息都在html里边，只需要请求，解析出来即可。</p>
<p>2、爬虫京东和阿里的就不一样了，价格或者图片是被隐藏的，得通过其他方式；找到他们ajax请求的接口等。当接口如果发生变化，还需要调整修改。当然，只要页面能显示的数据，我们通过爬虫都能获取到；不过阿里是有很强的反爬虫机制的，当你请求数过多的时候，会强制跳转登录页面，要想记录爬信息，得通过这个关卡。。。。有时间研究一下吧。</p>
<p>3、补充：阿里反的是频繁爬虫，只要模拟好爬虫行为接近浏览器，或者是项目只对个人来使用（请求不会频繁），是没有任何问题的。</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/index_preview.png" alt="index"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/goodlist_preview.png" alt="index"></p>
<p>关注的商品价格发生变化（涨价or降价）的时候发生邮件通知，如测试截图：</p>
<p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/email-sample.png" alt="index"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>详情见README.md</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">https://github.com/giscafer/Ponitor</a></p>
<p>欢迎交流学习！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发这个项目的初衷是学习&lt;code&gt;vue.js+webpack&lt;/code&gt;构建应用，加上学习&lt;code&gt;ES6&lt;/code&gt;之后没有正式在项目里边练习，然后偶然看到一个demo是做app爬虫的，加上本人又有计划入手个单反的想法，于是就有了&lt;a href=&quot;https://github.com/giscafer/Ponitor&quot;&gt;Ponitor&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;项目支持对天猫、淘宝、和京东进行爬虫，关注一些商品，降价或涨价的时候都推送消息；（话说如果每天都监测商品价格，在双11和双12，会发现有些商家提前提升价格再故意降价的情况，哈哈哈……，只是猜测，不过这情况是会有的吧。），他们的恶劣行为会被&lt;code&gt;Ponitor&lt;/code&gt;记录。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="Project" scheme="http://giscafer.com/tags/Project/"/>
    
      <category term="vue" scheme="http://giscafer.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://giscafer.com/tags/webpack/"/>
    
      <category term="node.js" scheme="http://giscafer.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>知其然，知其所以然</title>
    <link href="http://giscafer.com/2016/03/18/diary2016-3-18/"/>
    <id>http://giscafer.com/2016/03/18/diary2016-3-18/</id>
    <published>2016-03-18T09:52:12.000Z</published>
    <updated>2016-12-14T16:50:09.265Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇简短而深刻的日记，记下此刻起（2016年3月18日17:58:35），日后在学习、工作用的技术知识点上，理解透彻其原理；做好一切<code>知其然，知其所以然</code>。</p>
<p>怀有一颗求知若渴的心，客观看清自身不足；做好现在的工作，展望未来！</p>
<p>写此谨记！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇简短而深刻的日记，记下此刻起（2016年3月18日17:58:35），日后在学习、工作用的技术知识点上，理解透彻其原理；做好一切&lt;code&gt;知其然，知其所以然&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;怀有一颗求知若渴的心，客观看清自身不足；做好现在的工作，展望未来！&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
    
      <category term="diary" scheme="http://giscafer.com/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>npm设置淘宝镜像</title>
    <link href="http://giscafer.com/2016/03/08/npm-registry/"/>
    <id>http://giscafer.com/2016/03/08/npm-registry/</id>
    <published>2016-03-08T15:36:18.000Z</published>
    <updated>2016-12-14T16:47:10.989Z</updated>
    
    <content type="html"><![CDATA[<p>今晚使用npm下载<code>webpack</code>和其他插件时巨慢，这是以前从未遇到过的，所以就换了淘宝镜像，快了很多</p>
<p>更换镜像方式很多种，参考官方<a href="http://npm.taobao.org/" target="_blank" rel="external">文档说明</a></p>
<p>更方便的方式是，在c盘用户目录下，找到<code>.npmrc</code>文件，加入如下代码即可。</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">registry</span> = <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</div></pre></td></tr></table></figure>
<p>或者手动设置</p>
<pre><code>npm config set registry http://registry.npm.taobao.org/
</code></pre><p>但是这样做有个问题，发布npm插件的时候需要<code>npm adduser</code>，如果<code>.npmrc</code>文件填了这个的话，是登录不上的，<br>所以记得发布插件的时候删除了，或者是通过上边<code>文档说明</code>提供的其他方式解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今晚使用npm下载&lt;code&gt;webpack&lt;/code&gt;和其他插件时巨慢，这是以前从未遇到过的，所以就换了淘宝镜像，快了很多&lt;/p&gt;
&lt;p&gt;更换镜像方式很多种，参考官方&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="技术" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="开发手册" scheme="http://giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="npm" scheme="http://giscafer.com/tags/npm/"/>
    
  </entry>
  
</feed>
