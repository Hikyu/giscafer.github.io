<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Giscafer's blog]]></title>
  <subtitle><![CDATA[知其然，知其所以然]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://giscafer.com/"/>
  <updated>2016-08-20T09:04:53.971Z</updated>
  <id>http://giscafer.com/</id>
  
  <author>
    <name><![CDATA[giscafer]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[前端面试笔记]]></title>
    <link href="http://giscafer.com/2016/08/10/the-interveiw-for-a-second-job/"/>
    <id>http://giscafer.com/2016/08/10/the-interveiw-for-a-second-job/</id>
    <published>2016-08-10T09:02:41.000Z</published>
    <updated>2016-08-20T09:04:53.971Z</updated>
    <content type="html"><![CDATA[<p>面试邀请很多，最后只面试了4个，一方面心累了，一方面想通过新的平台再加强一下自己，今后再次去尝试。<br><a id="more"></a></p>
<h3 id="2016-8-4_下午">2016-8-4 下午</h3><p>下午，面试了本周第一家公司（这也是两年以来，第二次面对面的面试，第一次是北京的老东家，一干就干了2年整），这次面试的是一家做闪购的公司，公司办公地理位置好，环境不错，主要做的是App产品，去了才知道招聘的前端就主要是App的前端，这也是我最弱的地方了，一直做PC端的前端，在今年的6月份，离职前两个月，才接手一个ionic+angularjs相关的H5 App开发，功能模块的开发，当时时间紧张，所有的时间都花费在功能模块的开发，界面UI这些都是用现成的ionic的样式或者bootstrap样式；也就是没有设计美化UI，直接开发功能。<br>这是传统行业的特点，开发的时候都优先功能第一。</p>
<p>一直以来，我的App前端UI方向可以说是没有实践过的，给出一个设计图，通过HTML/CSS来仿真出来是有点困难，因为在老东家，这些都被美工、UI设计师包揽了。我能做的是在他们设计好的成品上进行简单的修改和调整，我是属<code>于偏JS方向的前端开发工程师</code></p>
<p><strong>面试过程：</strong><br>一、首先，填写个人资料，然后可能有笔试（前台给我拿了Linux运维的笔试题，猜想可能没准备前端笔试题目，所以我就没有参加笔试吧）。</p>
<p>二、然后，来了两人面试，一个负责技术提问，问了一些前端相关的问题，还有一些页面适配等问题；问的前端问题我是都会的，答得可能不好而已吧，我属于一个不善于表述的……但是问了手机端的页面适配，CSS相关的问题的话，我就捉急了，简单的可以，再深一点那就不行了，毕竟实践少，也没机会，业余学习也没注重。</p>
<p><strong>其他问题：</strong><br>1、JavaScript实现继承的方式有哪些；<br>2、call/apply的区别；<br>3、闭包了解；<br>4、对AMD、CMD规范的认识和区别；</p>
<p>三、最后，来了一个人，可能是技术负责相关人员，进来叫我简单的自我介绍一下，我就两句话就介绍完了，o(╯□╰)o，说了自己的意图而已。<br>这个面试官有3个问题：<br>1、一个网页打开比较慢的时候，你怎么去排除问题，会怀疑哪里出了问题？怎么解决这些问题？<br>2、如何清除浏览器的脏缓存？<br>3、你觉得你比别人优越在哪？</p>
<p>四、最终，hr进来大致了解一下情况，问一下以前的薪资，目前期望的薪资，个人情况和以前公司的大致情况等内容。</p>
<p><strong>总结：</strong><br>面试体验：怎个面试过程比较友善，面试官态度很好，最后都会问一下有没有想了解的问题<br>个人方面缺陷总结：<br>1、切片相关的技能，要加强，加强CSS技能<br>2、手机端相关的规范，布局、排版加强了解，最好是通过开发实践去学习<br>3、加强面试技巧，让自己会的都能表达出来，展示自己与别人不同的一面</p>
<h3 id="2016-8-5_下午">2016-8-5 下午</h3><p>满满的面试安排，都推掉了，周二台风，一周就两个面试，早上都睡懒觉了，明天周末，又要休息两天；这不紧不慢的找工作，没谁了。。。<br>今天下午14:00面试，是一家做政务相关OA产品的公司，和老东家很详细啊，去了才清楚是做传统软件的。</p>
<p>面试流程：<br>一、填写表格；</p>
<p>二、hr面试，简单了解一下情况；</p>
<p>三、1道题上机，递归实现一个无限层级菜单（做不出来，囧~~，CSS实现样式效果是很大的硬伤，瞬间没心情了）</p>
<p>四、没做出来也继续和前端小组负责人面试，大致说了一些他们公司目前的工作情况，问了好几次我有没有要了解的问题，我都说没有。。。。</p>
<p>因为没有心情了，也没想问什么问题，最后问了几个简单的JavaScript基础问题；</p>
<p>1、js继承，call,apply使用</p>
<p>2、jquery的$.click和$.on(‘click’)方式绑定的区别，html的onclick属性和addEventListener绑定点击事件的区别；</p>
<p>3、jquery源码中的$.extend和fn.extend两者区别和$.extend是如何接收参数的。</p>
<p>4、如何对一篇文章全文检索某个字并高亮；</p>
<p>5、有没有使用过jquery的$.proxy方法，此方法的作用</p>
<p>五、技术负责人面完，我直接走了，我以为可以走了。都说好通知联系的；座上地铁后，HR打电话来说，经理想对我面试，可以商量一下薪资问题，能不能回来？我说不回去了……如果薪资不能满足简历要求，那就不联系了吧。。。其实按理还是回去比较好，出于礼貌，或者可以说是技术人员面试完，没说让我再坐一下，已经和我说如果可以，考虑什么时间入职，我说下下周一，然后就走了，挂我咯，主要还是不想回去，因为工作内容太像老东家，想换种工作模式。。。（完）</p>
<h3 id="2016-8-8_上午">2016-8-8 上午</h3><p>今天是周一，上午去面试一家做汽车相关App的公司，办公环境很好，只是位置交通和宿舍之间交通不方便，步行很久。这家公司招聘的前端主要是做App页面和一些活动展示页，要求是CSS+JQuery+HTML5精通，能随手写出一个jquery插件，比如照片轮播插件等，这也完全是我的弱项。面试随意问了一些，看简历情况提问，问了如何设计一个照片轮播插件；apply/call区别，promise最后的处理，如何判断一个方法是否属于这个类等。然后就没然后了……叫我回来好好补一下CSS+HTML5这些，才能转前端，终归到底，还是要求偏向CSS的前端工程师……</p>
<h3 id="2016-8-8_下午">2016-8-8 下午</h3><p>下午面试，是一家北京公司，广州分公司和亿迅合作做项目的，去了亿迅工作大厦面试，工作环境一般；流程是先笔试后面试；<br>笔试大概题目（以下就大概描述方向）：<br><strong>JavaScript基础问题：</strong><br>1、JavaScript操作CSS的float属性left（注意IE的区别）<br>2、正则判断一个字符串是否是Email<br>3、一道JavaScript题目，写出执行结果（考点主要是一些变量域+语句执行顺序等）<br>4、什么是闭包？写出一个闭包的例子。<br>5、add(2)(3)(4)的执行结果为9，写出函数体。<br><strong>JQuery问题：</strong><br>6、你是否了解jquery的$.ready方法？它是如何实现的？</p>
<p>7、你是否了解jquery的$.Deferred对象？它是用来解决什么问题？</p>
<p>8、一道插件题，说设计一个tab标签的话，你会提供是吗接口，给出什么功能，如果用户频繁的切换，会造成什么问题？怎么解决？<br><strong>Angular问题</strong><br>9、MVVM是什么？</p>
<p>10、谈谈Controller、Factory/Service、Filter的作用和区别？</p>
<p>11、不同的Controller直接是如何通信（传值）的？</p>
<p>12、请写出你Angular项目的目录结构？</p>
<p><strong>扩展题</strong></p>
<p>13、你还关注什么前沿的技术？谈谈他们的优势。</p>
<p>以上是笔试的大概内容，一共是三页题目，如果JavaScript基础牢，jquery熟悉，然后源码研究了解过的话，题目是不难的。angular考点也是基础问题。<br>面试官面试很快，估计是比较忙，赶时间。过来叫我自我介绍一下，然后问做过什么项目，简单说一下。问GET/POST在Restful中的区别，angular的MVVM的理解，<br>然后就没问多少，问一下期待薪资，然后就结束了。</p>
<h3 id="个人总结：">个人总结：</h3><p>1、首先，离开帝都回广州发展，个人是裸辞，加上广州这边没认识的人，更没有程序猿的人脉；完全是靠自己回来闯，主要还是带着女票回来。来广州的时候，先主要解决租房子问题，租房子的过程，女朋友也一边去面试，两次面试两次都通过，实在厉害，最后确定了一家公司。最后我们用四天的时间找到了房子租，每个月1700的房租，找到房子后，我就开始网上投简历……</p>
<p>2、简历我选择了在拉勾网和前程无忧上放，拉钩的简历投过去反应太慢，有反应了等回复也需要好几天（所以建议简历提前投），那这样我就放更长的假期了；<br>前程无忧我大概投了5、6个公司，然后等消息，最终情况是，我选择投简历的公司都没有回应。但是，在前程无忧上刚放简历一天，就每天有十多个HR电话打过来， 前面的几天都在接电话，安排面试时间，主要的问题是，HR通过简单的公司介绍我都没能了解完全是个什么样子的公司，我不想不清楚是什么公司就去面试，避免浪费时间，迫不得已，我把前程无忧上的简历关闭掉了。</p>
<p>3、一共可能有20多个面试电话，GIS的也有好些个，GIS的面试邀请我是直接拒绝的，理由是不想再做GIS方向，因为传统的GIS行业+给政府做的项目、系统，都很随意，有点像堆功能似得，和个人追求相悖。刚开始面试也是有点懒散，起初安排早上的面试都没去，原因是睡懒觉+下大雨+有点远。于是我第一周面试只面试了一家……</p>
<p>4、第二周，我觉得不应该那么任性了，已经无业好几周了，觉得无聊，最终尝试了几个互联网前端岗位后，都要求CSS+HTML5比较高，高强度还原PS页面+兼容各个终端，自己胜任不了，以前关注重点都在JavaScript上了，CSS太弱，偏JavaScript，但是没接到偏JS前端的面试邀请呀。</p>
<p>5、目前的公司是用Angular+ES6的开发模式，用到Nodejs等，和自己之前学习的有共同部分，只是前端岗位没有要求去做CSS+HTML5那种高还原PS美工页面，打算先干着然后业余加技能，学精。</p>
<p><strong>6、学习目标：在现有工作胜任后，加强CSS+HTML5，以及精通JQuery插件书写，能手写CSS，高强度还原PS设计稿，兼容各个终端，加强HTML5 APP方向（这是理想的计划，目前自己还是偏向JS的前端开发,JS这边也要加强）</strong></p>
<h3 id="给跳槽的前端同学们建议：">给跳槽的前端同学们建议：</h3><p>1、能不裸辞尽量别裸辞，提前投简历</p>
<p>2、简历不需要太多的装饰，只需要列出自己熟练掌握的技能，工作经验内容+项目列表，最重要的是，能提供项目或者作品展示最后（起码前端来说是最好的）</p>
<p>3、基础要牢固，框架的源码要了解</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>面试邀请很多，最后只面试了4个，一方面心累了，一方面想通过新的平台再加强一下自己，今后再次去尝试。<br>]]>
    
    </summary>
    
      <category term="前端面试" scheme="http://giscafer.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="diary" scheme="http://giscafer.com/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自制Echarts地图数据 mapshaper-plus]]></title>
    <link href="http://giscafer.com/2016/06/06/echarts-data-map-project/"/>
    <id>http://giscafer.com/2016/06/06/echarts-data-map-project/</id>
    <published>2016-06-06T03:32:47.000Z</published>
    <updated>2016-06-06T03:35:44.728Z</updated>
    <content type="html"><![CDATA[<h1 id="mapshaper-plus">mapshaper-plus</h1><p>基于<a href="https://github.com/mbloch/mapshaper" target="_blank" rel="external">mapshaper</a>对geojson地图数据的坐标信息进行压缩编码，并提供可直接生成压缩编码后的echarts map数据格式</p>
<a id="more"></a>
<h2 id="Demo">Demo</h2><p><a href="http://giscafer.com/mapshaper-plus/">http://giscafer.com/mapshaper-plus/</a></p>
<h2 id="Description">Description</h2><p><strong>介绍</strong> ——<a href="https://github.com/mbloch/mapshaper" target="_blank" rel="external">mapshaper</a>可以将多种数据格式（Shapefile, GeoJSON, TopoJSON<br>和 Zip files）导入后，对地图的编辑和导出（Shapefile, GeoJSON, TopoJSON, DSV, SVG），功能强大和简单易用。</p>
<p><code>mapshaper-plus</code>是在<code>mapshaper</code>基础上拓展对地图坐标信息的压缩编码，很大程度上减小了文件的代码行数和字节大小：譬如一个贵州省的数据，原始的<code>geojson</code>数据会在<code>30M</code>左右，但在对坐标信息压缩编码后，仅为<code>1.4M</code>。</p>
<p><strong>背景</strong> ——在做echarts图表统计时，需要自制地图数据，但官方没有提供一个平台可以直接将<code>shp文件</code>转化为压缩后的<code>json</code>或<code>js</code>格式的地图文件，而<code>mapshaper</code>导出的json数据没有压缩，数据量过大。</p>
<p>体验可以访问<a href="http://giscafer.com/mapshaper-plus/">mapshaper-plus在线demo</a></p>
<h2 id="Screenshot">Screenshot</h2><p><img src="https://raw.githubusercontent.com/giscafer/mapshaper-plus/master/images/echarts01.png" alt="导出压缩版的数据"></p>
<h2 id="Github">Github</h2><p><a href="https://github.com/giscafer/mapshaper-plus" target="_blank" rel="external">https://github.com/giscafer/mapshaper-plus</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="mapshaper-plus">mapshaper-plus</h1><p>基于<a href="https://github.com/mbloch/mapshaper">mapshaper</a>对geojson地图数据的坐标信息进行压缩编码，并提供可直接生成压缩编码后的echarts map数据格式</p>]]>
    
    </summary>
    
      <category term="echarts地图" scheme="http://giscafer.com/tags/echarts%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="mapshaper" scheme="http://giscafer.com/tags/mapshaper/"/>
    
      <category term="Project" scheme="http://giscafer.com/categories/Project/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图片上传控件angluar-webuploader]]></title>
    <link href="http://giscafer.com/2016/04/23/project-angluar-webuploader/"/>
    <id>http://giscafer.com/2016/04/23/project-angluar-webuploader/</id>
    <published>2016-04-23T14:47:13.000Z</published>
    <updated>2016-04-24T02:46:16.068Z</updated>
    <content type="html"><![CDATA[<h2 id="简述">简述</h2><p>最近公司做个项目需要使用AngularJS重新封装图片上传控件，支持IE低版本等，之间看过<code>JQuery-File-Upload</code>，尝试使用了一些，觉得文件太多，不好修改；最后使用<a href="http://fex.baidu.com/webuploader" target="_blank" rel="external">webuploader</a>时因为其简洁的界面和使用方便；</p>
<p><code>angluar-webuploader</code>是使用angular指令封装的webuploader demo，弹窗上传图片，缩略图展示列表，翻页效果；支持点击缩略图查看大图详情；</p>
<a id="more"></a>
<h2 id="截图">截图</h2><p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot.png" alt="screenshot0"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot2.png" alt="screenshot1"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/angular-webuploader/master/images/screenshot1.png" alt="screenshot2"></p>
<h2 id="使用">使用</h2><p>本demo没有给出java后台代码，后台代码也简单，一个文件读写+图片压缩，返回结果参考以下<code>json</code>格式；<br>然后将图片上传接口请求地址在<code>app.js</code>配置后即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"status"</span>:<span class="literal">true</span>,<span class="comment">//上传成功状态</span></span><br><span class="line">	<span class="string">"newName"</span>:<span class="string">"/test/temp/upload/picture/20160422/c0c0b8f7bc574ec88f891ff834b79bab.jpg"</span>,<span class="comment">//原图片路径</span></span><br><span class="line">	<span class="string">"thumbName"</span>:<span class="string">"/test/temp/upload/picture/20160422/thumb/c0c0b8f7bc574ec88f891ff834b79bab.jpg"</span><span class="comment">//缩略图路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>源码地址，欢迎学习交流<br><a href="https://github.com/giscafer/angular-webuploader" target="_blank" rel="external">https://github.com/giscafer/angular-webuploader</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简述">简述</h2><p>最近公司做个项目需要使用AngularJS重新封装图片上传控件，支持IE低版本等，之间看过<code>JQuery-File-Upload</code>，尝试使用了一些，觉得文件太多，不好修改；最后使用<a href="http://fex.baidu.com/webuploader">webuploader</a>时因为其简洁的界面和使用方便；</p>
<p><code>angluar-webuploader</code>是使用angular指令封装的webuploader demo，弹窗上传图片，缩略图展示列表，翻页效果；支持点击缩略图查看大图详情；</p>]]>
    
    </summary>
    
      <category term="angluar" scheme="http://giscafer.com/tags/angluar/"/>
    
      <category term="webuploader" scheme="http://giscafer.com/tags/webuploader/"/>
    
      <category term="Project" scheme="http://giscafer.com/categories/Project/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs链接oracle]]></title>
    <link href="http://giscafer.com/2016/04/13/node-oracledb-demo/"/>
    <id>http://giscafer.com/2016/04/13/node-oracledb-demo/</id>
    <published>2016-04-13T03:30:17.000Z</published>
    <updated>2016-04-13T04:19:47.613Z</updated>
    <content type="html"><![CDATA[<h2 id="windows下node-oracledb环境">windows下node-oracledb环境</h2><p>在windows环境下， oracle一直是个麻烦事情，参考官方<a href="https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#instwin" target="_blank" rel="external">环境搭建说明</a><br><a id="more"></a><br>原本就在电脑上安装了<code>oracle11g</code>数据库,<code>VS2013</code>,<code>python2.7</code>，所以，我在环境变量下只需要再添加以下两个变量：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set OCI_LIB_DIR=D:<span class="command">\app</span><span class="command">\giscafer</span><span class="command">\product</span>\11.2.0<span class="command">\dbhome</span>_1<span class="command">\OCI</span><span class="command">\lib</span><span class="command">\MSVC</span></span><br><span class="line">set OCI_INC_DIR=D:<span class="command">\app</span><span class="command">\giscafer</span><span class="command">\product</span>\11.2.0<span class="command">\dbhome</span>_1<span class="command">\OCI</span><span class="command">\include</span></span><br></pre></td></tr></table></figure></p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> <span class="comment">--save oracle</span></span>
</code></pre><p><img src="http://giscafer.github.io/static/img/node-oracledb.png" alt="node-oracledb.png"></p>
<h2 id="oracle数据库连接">oracle数据库连接</h2><p>1、安装<code>node-oracledb</code>完成后，新建一个数据库配置文件<code>dbconfig.js</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  user          : process.env.NODE_ORACLEDB_USER || <span class="string">"scott"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Instead of hard coding the password, consider prompting for it,</span></span><br><span class="line">  <span class="comment">// passing it in an environment variable via process.env, or using</span></span><br><span class="line">  <span class="comment">// External Authentication.</span></span><br><span class="line">  password      : process.env.NODE_ORACLEDB_PASSWORD || <span class="string">"tiger"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For information on connection strings see:</span></span><br><span class="line">  <span class="comment">// https://github.com/oracle/node-oracledb/blob/master/doc/api.md#connectionstrings</span></span><br><span class="line">  connectString : process.env.NODE_ORACLEDB_CONNECTIONSTRING || <span class="string">"localhost/orcl"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setting externalAuth is optional.  It defaults to false.  See:</span></span><br><span class="line">  <span class="comment">// https://github.com/oracle/node-oracledb/blob/master/doc/api.md#extauth</span></span><br><span class="line">  externalAuth  : process.env.NODE_ORACLEDB_EXTERNALAUTH ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>2、然后测试数据库连接，建个<code>connect.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oracledb = <span class="built_in">require</span>(<span class="string">'oracledb'</span>);</span><br><span class="line"><span class="keyword">var</span> dbConfig = <span class="built_in">require</span>(<span class="string">'./dbconfig.js'</span>);</span><br><span class="line"></span><br><span class="line">oracledb.getConnection(</span><br><span class="line">  &#123;</span><br><span class="line">    user          : dbConfig.user,</span><br><span class="line">    password      : dbConfig.password,</span><br><span class="line">    connectString : dbConfig.connectString</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>)</span><br><span class="line">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection was successful!'</span>);</span><br><span class="line"></span><br><span class="line">    connection.release(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span><br><span class="line">      </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err.message);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>3、最后运行<code>connect.js</code>，成功会输出’Connection was successful!’信息</p>
<pre><code><span class="tag">node</span> <span class="tag">connect</span><span class="class">.js</span>
</code></pre><h2 id="查询表">查询表</h2><p>1、<code>npm install --save async</code></p>
<p>2、新建<code>`select.js</code>文件，代码如下（sql语句修改为自己需要查询的表语句即可）</p>
<p>3、<code>node select.js</code>执行即可看到结果，结果分为数据和对象两种处理方式，比较简单</p>
<p>测试结果图：</p>
<p><img src="http://giscafer.github.io/static/img/node-oracledb-select.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">var</span> oracledb = <span class="built_in">require</span>(<span class="string">'oracledb'</span>);</span><br><span class="line"><span class="keyword">var</span> dbConfig = <span class="built_in">require</span>(<span class="string">'./dbconfig.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Properties are applicable to all connections and SQL executions.</span></span><br><span class="line"><span class="comment">// They can also be set or overridden at the individual execute() call level</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This script sets outFormat in the execute() call but it could be set here instead:</span></span><br><span class="line"><span class="comment">// oracledb.outFormat = oracledb.OBJECT;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doconnect = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  oracledb.getConnection(</span><br><span class="line">    &#123;</span><br><span class="line">      user          : dbConfig.user,</span><br><span class="line">      password      : dbConfig.password,</span><br><span class="line">      connectString : dbConfig.connectString</span><br><span class="line">    &#125;,</span><br><span class="line">    cb);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dorelease = <span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</span><br><span class="line">  conn.release(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default Array Output Format</span></span><br><span class="line"><span class="keyword">var</span> doquery_array = <span class="function"><span class="keyword">function</span> (<span class="params">conn, cb</span>) </span>&#123;</span><br><span class="line">  conn.execute(</span><br><span class="line">    <span class="string">"SELECT location_id, city FROM locations WHERE city LIKE 'S%' ORDER BY city"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> cb(err, conn);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"----- Cities beginning with 'S' (default ARRAY output format) --------"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result.rows);</span><br><span class="line">        <span class="keyword">return</span> cb(<span class="literal">null</span>, conn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional Object Output Format</span></span><br><span class="line"><span class="keyword">var</span> doquery_object = <span class="function"><span class="keyword">function</span> (<span class="params">conn, cb</span>) </span>&#123;</span><br><span class="line">  conn.execute(</span><br><span class="line">    <span class="string">"SELECT location_id, city FROM locations WHERE city LIKE 'S%' ORDER BY city"</span>,</span><br><span class="line">    &#123;&#125;, <span class="comment">// A bind variable parameter is needed to disambiguate the following options parameter</span></span><br><span class="line">        <span class="comment">// otherwise you will get Error: ORA-01036: illegal variable name/number</span></span><br><span class="line">    &#123; outFormat: oracledb.OBJECT &#125;, <span class="comment">// outFormat can be OBJECT or ARRAY.  The default is ARRAY</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> cb(err, conn);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"----- Cities beginning with 'S' (OBJECT output format) --------"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result.rows);</span><br><span class="line">        <span class="keyword">return</span> cb(<span class="literal">null</span>, conn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.waterfall(</span><br><span class="line">  [</span><br><span class="line">    doconnect,</span><br><span class="line">    doquery_array,</span><br><span class="line">    doquery_object</span><br><span class="line">  ],</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.error(<span class="string">"In waterfall error cb: ==&gt;"</span>, err, <span class="string">"&lt;=="</span>); &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn)</span><br><span class="line">      dorelease(conn);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>更多见官方提供的例子：<br><a href="https://github.com/oracle/node-oracledb/tree/master/examples" target="_blank" rel="external">https://github.com/oracle/node-oracledb/tree/master/examples</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="windows下node-oracledb环境">windows下node-oracledb环境</h2><p>在windows环境下， oracle一直是个麻烦事情，参考官方<a href="https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#instwin">环境搭建说明</a><br>]]>
    
    </summary>
    
      <category term="node-oracledb" scheme="http://giscafer.com/tags/node-oracledb/"/>
    
      <category term="node.js链接oracle" scheme="http://giscafer.com/tags/node-js%E9%93%BE%E6%8E%A5oracle/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ponitor价格监测]]></title>
    <link href="http://giscafer.com/2016/03/31/project-ponitor/"/>
    <id>http://giscafer.com/2016/03/31/project-ponitor/</id>
    <published>2016-03-31T05:21:01.000Z</published>
    <updated>2016-04-01T14:55:58.916Z</updated>
    <content type="html"><![CDATA[<p>开发这个项目的初衷是学习<code>vue.js+webpack</code>构建应用，加上学习<code>ES6</code>之后没有正式在项目里边练习，然后偶然看到一个demo是做app爬虫的，加上本人又有计划入手个单反的想法，于是就有了<a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">Ponitor</a>。</p>
<p>项目支持对天猫、淘宝、和京东进行爬虫，关注一些商品，降价或涨价的时候都推送消息；（话说如果每天都监测商品价格，在双11和双12，会发现有些商家提前提升价格再故意降价的情况，哈哈哈……，只是猜测，不过这情况是会有的吧。），他们的恶劣行为会被<code>Ponitor</code>记录。</p>
<a id="more"></a>
<h2 id="关于商品信息获取">关于商品信息获取</h2><p>1、爬虫Apple App是最方便的，一切信息都在html里边，只需要请求，解析出来即可。</p>
<p>2、爬虫京东和阿里的就不一样了，价格或者图片是被隐藏的，得通过其他方式；找到他们ajax请求的接口等。当接口如果发生变化，还需要调整修改。当然，只要页面能显示的数据，我们通过爬虫都能获取到；不过阿里是有很强的反爬虫机制的，当你请求数过多的时候，会强制跳转登录页面，要想记录爬信息，得通过这个关卡。。。。有时间研究一下吧。</p>
<p>3、补充：阿里反的是频繁爬虫，只要模拟好爬虫行为接近浏览器，或者是项目只对个人来使用（请求不会频繁），是没有任何问题的。</p>
<h2 id="项目截图">项目截图</h2><p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/index_preview.png" alt="index"></p>
<p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/goodlist_preview.png" alt="index"></p>
<p>关注的商品价格发生变化（涨价or降价）的时候发生邮件通知，如测试截图：</p>
<p><img src="https://raw.githubusercontent.com/giscafer/Ponitor/master/wiki/email-sample.png" alt="index"></p>
<h2 id="使用">使用</h2><p>详情见README.md</p>
<h2 id="源码">源码</h2><p><a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">https://github.com/giscafer/Ponitor</a></p>
<p>欢迎交流学习！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开发这个项目的初衷是学习<code>vue.js+webpack</code>构建应用，加上学习<code>ES6</code>之后没有正式在项目里边练习，然后偶然看到一个demo是做app爬虫的，加上本人又有计划入手个单反的想法，于是就有了<a href="https://github.com/giscafer/Ponitor">Ponitor</a>。</p>
<p>项目支持对天猫、淘宝、和京东进行爬虫，关注一些商品，降价或涨价的时候都推送消息；（话说如果每天都监测商品价格，在双11和双12，会发现有些商家提前提升价格再故意降价的情况，哈哈哈……，只是猜测，不过这情况是会有的吧。），他们的恶劣行为会被<code>Ponitor</code>记录。</p>]]>
    
    </summary>
    
      <category term="Project" scheme="http://giscafer.com/tags/Project/"/>
    
      <category term="node.js" scheme="http://giscafer.com/tags/node-js/"/>
    
      <category term="vue" scheme="http://giscafer.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://giscafer.com/tags/webpack/"/>
    
      <category term="Project" scheme="http://giscafer.com/categories/Project/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/Project/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[知其然，知其所以然]]></title>
    <link href="http://giscafer.com/2016/03/18/diary2016-3-18/"/>
    <id>http://giscafer.com/2016/03/18/diary2016-3-18/</id>
    <published>2016-03-18T09:52:12.000Z</published>
    <updated>2016-03-18T10:18:09.701Z</updated>
    <content type="html"><![CDATA[<p>这是一篇简短而深刻的日记，记下此刻起（2016年3月18日17:58:35），日后在学习、工作用的技术知识点上，理解透彻其原理；做好一切<code>知其然，知其所以然</code>。</p>
<p>怀有一颗求知若渴的心，客观看清自身不足；做好现在的工作，展望未来！</p>
<p>写此谨记！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一篇简短而深刻的日记，记下此刻起（2016年3月18日17:58:35），日后在学习、工作用的技术知识点上，理解透彻其原理；做好一切<code>知其然，知其所以然</code>。</p>
<p>怀有一颗求知若渴的心，客观看清自身不足；做好现在的工作，展望未来！</p>
]]>
    </summary>
    
      <category term="diary" scheme="http://giscafer.com/tags/diary/"/>
    
      <category term="diary" scheme="http://giscafer.com/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm设置淘宝镜像]]></title>
    <link href="http://giscafer.com/2016/03/08/npm-registry/"/>
    <id>http://giscafer.com/2016/03/08/npm-registry/</id>
    <published>2016-03-08T15:36:18.000Z</published>
    <updated>2016-06-19T15:23:20.546Z</updated>
    <content type="html"><![CDATA[<p>今晚使用npm下载<code>webpack</code>和其他插件时巨慢，这是以前从未遇到过的，所以就换了淘宝镜像，快了很多</p>
<p>更换镜像方式很多种，参考官方<a href="http://npm.taobao.org/" target="_blank" rel="external">文档说明</a></p>
<p>更方便的方式是，在c盘用户目录下，找到<code>.npmrc</code>文件，加入如下代码即可。</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">registry</span> = <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>或者手动设置</p>
<pre><code>npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org/
</code></pre><p>但是这样做有个问题，发布npm插件的时候需要<code>npm adduser</code>，如果<code>.npmrc</code>文件填了这个的话，是登录不上的，<br>所以记得发布插件的时候删除了，或者是通过上边<code>文档说明</code>提供的其他方式解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今晚使用npm下载<code>webpack</code>和其他插件时巨慢，这是以前从未遇到过的，所以就换了淘宝镜像，快了很多</p>
<p>更换镜像方式很多种，参考官方<a href="http://npm.taobao.org/" target="_blank" rel]]>
    </summary>
    
      <category term="npm" scheme="http://giscafer.com/tags/npm/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Nodejs项目里写测试]]></title>
    <link href="http://giscafer.com/2016/02/12/nodejs-mocha-test/"/>
    <id>http://giscafer.com/2016/02/12/nodejs-mocha-test/</id>
    <published>2016-02-12T11:57:46.000Z</published>
    <updated>2016-02-20T11:36:45.564Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>不写测试的项目都是耍流氓</p>
</blockquote>
<p><code>BDD</code>和<code>TDD</code>的差别： <a href="http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/" target="_blank" rel="external">The Difference Between TDD and BDD</a></p>
<a id="more"></a>
<h3 id="测试框架：">测试框架：</h3><p><code>mocha</code></p>
<blockquote>
<p>Mocha是一个基于node.js和浏览器的集合各种特性的Javascript测试框架，并且可以让异步测试也变的简单和&gt; 有趣。Mocha的测试是连续的，在正确的测试条件中遇到未捕获的异常时，会给出灵活且准确的报告。</p>
</blockquote>
<h3 id="辅助工具">辅助工具</h3><ul>
<li>should.js (BDD)</li>
<li>chai（支持assert,should,expect）</li>
<li>supertest (接口测试，代替浏览器地址请求，十分方便)</li>
</ul>
<p>一个典型的mocha例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"><span class="keyword">var</span> should=<span class="built_in">require</span>(<span class="string">'chai'</span>).should();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs before all tests in this block</span></span><br><span class="line">    &#125;);</span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// runs after all tests in this block</span></span><br><span class="line">  &#125;);</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// runs before each test in this block</span></span><br><span class="line">  &#125;);</span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// runs after each test in this block</span></span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line">  describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">5</span>).should.equal(-<span class="number">1</span>);</span><br><span class="line">      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">0</span>).should.equal(-<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>beforeEach</code>会对当前<code>describe</code>下的所有子<code>case</code>生效。</li>
<li><code>before</code>和<code>after</code>的代码没有特殊顺序要求。</li>
<li>同一个<code>describe</code>下可以有多个<code>before</code>，执行顺序与代码顺序相同。</li>
<li>同一个<code>describe</code>下的执行顺序为<code>before</code>, <code>beforeEach</code>, <code>afterEach</code>, <code>after</code></li>
<li>当一个<code>it</code>有多个<code>before</code>的时候，执行顺序从最外围的<code>describe</code>的<code>before</code>开始，其余同理。</li>
</ul>
<p>1.<code>describe (moduleName, testDetails)</code>表示<code>测试套件</code>（test suite），表示一组相关的测试。它是一个函数，可以嵌套，第一个参数<code>moduleName</code>是测试套件的名称（可随意命名，一般描述测试内容），第二个参数<code>testDetails</code>是一个实际执行的函数。</p>
<p>2.<code>it (info, function)</code>块称为<code>测试用例</code>（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数<code>info</code>是测试用例的名称，第二个参数<code>function</code>是一个实际执行的函数。</p>
<p>3.<code>done()</code> 按照瀑布流编程习惯，取名done是表示你回调的最深处，也就是结束写嵌套回调函数。但对于回调链来说done实际上意味着告诉mocha从此处开始测试，一层层回调回去。此外，一个测试用例下（也就是一个it）里面只能调用一次done。</p>
<p>4.使用命令<code>mocha --recursive</code>执行当前目录下所有的测试用例（包括子目录）</p>
<h3 id="supertest使用">supertest使用</h3><p>  <code>supertest</code>可以用来测试nodejs项目中的Restful API，也就是，我们不需要在浏览器中输入请求地址测试。<br>  详细看<a href="https://github.com/visionmedia/supertest" target="_blank" rel="external">说明文档</a>，下面代码简单介绍：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'../app'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(app);<span class="comment">//获取对象</span></span><br><span class="line">describe(<span class="string">'#showuser_list page'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'should get admin/userlist'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">        request.get(<span class="string">'/admin/userlist'</span>)<span class="comment">//请求地址</span></span><br><span class="line">            .set(<span class="string">'Cookie'</span>, support.adminUserCookie)</span><br><span class="line">            .expect(<span class="number">200</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;<span class="comment">//验证结果</span></span><br><span class="line">                res.text.should.contain(<span class="string">'用户管理'</span>);</span><br><span class="line">                done(err);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="使用gulp自动化测试">使用gulp自动化测试</h3><p>1、安装插件：</p>
<ul>
<li>gulp</li>
<li>gulp-watch</li>
<li>gulp-mocha</li>
</ul>
<p>2、添加<code>Gulpfile.js</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">'src/server/test/**/*.js'</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch([<span class="string">'src/server/test/**/*.js'</span>, <span class="string">'lib/*.js'</span>], [<span class="string">'mocha'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mocha = <span class="built_in">require</span>(<span class="string">'gulp-mocha'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'mocha'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path , &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">        <span class="comment">// gulp-mocha needs filepaths so you can't have any plugins before it </span></span><br><span class="line">        .pipe(mocha(&#123;reporter: <span class="string">'spec'</span>&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'mocha'</span>, <span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure>
<p>3、运行监听测试文件改动，只要改动就会自动执行测试。</p>
<pre><code>gulp
</code></pre><h3 id="测试覆盖率">测试覆盖率</h3><p>在github上的项目大都有如图所示标志：</p>
<p><img src="http://giscafer.github.io/static/img/coverage-build.png" alt="Build Status &amp; Coverage Status"></p>
<p><strong>下面介绍如何使用<code>Istanbul With Mocha</code>生成测试覆盖率</strong></p>
<p>需要安装的插件有：</p>
<ul>
<li><a href="https://github.com/nickmerwin/node-coveralls" target="_blank" rel="external">coveralls</a></li>
<li><a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="external">istanbul</a></li>
<li>mocha</li>
</ul>
<p>1、在<code>package.json</code>文件中的script属性下加入npm自定义命令<code>mocha</code>和<code>cov</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"node app.js"</span>,</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"./node_modules/.bin/gulp"</span>,</span><br><span class="line">   <span class="string">"mocha"</span>: <span class="string">"./node_modules/.bin/mocha -u bdd 'src/server/test/**/*.@(js|jsx)'"</span>,</span><br><span class="line">   <span class="string">"cov"</span>: <span class="string">"istanbul cover ./node_modules/mocha/bin/_mocha src/server/test/**/*.js --report lcovonly -- -R spec &amp;&amp; cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js &amp;&amp; rm -rf ./coverage"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p><em>mocha命令意思是执行测试的语句，cov命令是生成测试覆盖命令，具体可以查看coveralls文档</em></p>
<p>2、使用github账号登录<code>travis-ci.org</code>站点，添加pro<br>在本地项目根目录中创建<code>.travis.yml</code>文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">repo_token: Yt71K1wQ83RTyiSxvVwkgnrYn***FQn # 从coveralls.io获取</span><br><span class="line">services: mongodb</span><br><span class="line">node_js:</span><br><span class="line">  - stable</span><br><span class="line">  - 5.3</span><br><span class="line">sudo: false</span><br><span class="line">script: npm run mocha</span><br><span class="line">after_script: npm run cov</span><br></pre></td></tr></table></figure></p>
<p>3、同样使用github账号登录<code>coveralls.io</code>，添加该pro，然后进入<code>SET UP COVERALLS页</code>可以看到教程，选择第一个将代码复制到<code>.coveralls.yml</code>文件中（同样是在根目录创建）<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># travis-pro 填写travis-ci的pro名称</span><br><span class="line">service_name: Vue-order</span><br><span class="line">repo_token: Yt71K1wQ83RTyiSxvVwkgnrYng9rQTFQn</span><br></pre></td></tr></table></figure></p>
<p>4、最后push提交代码到github，在travis-ci查看项目是否自动部署成功，失败的话点击查看详细日记信息，根据失败信息解决问题即可。之后每次项目提交代码后，travis-ci上都会自动building项目。</p>
<p>5、成功后，将项目相应结果图片放到Readme.md下</p>
<pre><code>[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/giscafer/Vue-order.svg?branch=master</span>)](<span class="link_url">https://travis-ci.org/giscafer/Vue-order</span>)
[<span class="link_label">![Coverage Status</span>](<span class="link_url">https://coveralls.io/repos/github/giscafer/Vue-order/badge.svg?branch=master</span>)](<span class="link_url">https://coveralls.io/github/giscafer/Vue-order?branch=master</span>)
</code></pre><p>如项目效果：<a href="https://github.com/giscafer/Vue-order" target="_blank" rel="external">https://github.com/giscafer/Vue-order</a></p>
<p>推荐几篇不错的文章：<br><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="external">测试框架 Mocha 实例教程</a><br><a href="https://cnodejs.org/topic/516526766d38277306c7d277#56beaebf26d02fc6626bb560" target="_blank" rel="external">初识 mocha in NodeJS</a><br><a href="https://cnodejs.org/topic/558df089ebf9c92d17e73358" target="_blank" rel="external">Nodejs开源项目里怎么样写测试、CI和代码测试覆盖率</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>不写测试的项目都是耍流氓</p>
</blockquote>
<p><code>BDD</code>和<code>TDD</code>的差别： <a href="http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/">The Difference Between TDD and BDD</a></p>]]>
    
    </summary>
    
      <category term="BDD" scheme="http://giscafer.com/tags/BDD/"/>
    
      <category term="mocha" scheme="http://giscafer.com/tags/mocha/"/>
    
      <category term="should" scheme="http://giscafer.com/tags/should/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[工作一年半了]]></title>
    <link href="http://giscafer.com/2016/02/11/diary-2016-02-11/"/>
    <id>http://giscafer.com/2016/02/11/diary-2016-02-11/</id>
    <published>2016-02-11T14:51:39.000Z</published>
    <updated>2016-03-01T16:07:50.860Z</updated>
    <content type="html"><![CDATA[<p>2014年7月，毕业工作，成为了一名程序猿，我算是误打误撞的进了it行业；公司是做gis相关的，工作是做web开发，平时也就写写JavaScript和html\css……，慢慢的，觉得乏味，偶然关注了互联网前端开发，发现目前工作并不算是真正的前端开发，从此，开始学习互联网前端开发相关技术，并热衷无法自拔……</p>
<a id="more"></a>
<p>上学，由于学校本专业（gis)的研究方向是农业或土壤，个人觉得偏离了当时gis流行的云计算或者大数据可视化分析，课程也没多少有趣的；另外，教学专业编程能力相对其他院校来说应该是最弱的，要求也是最低的吧；在上学的日子里，我已经对GIS就业方向感到了迷茫，也不知道什么缘由，我觉得我只能去学习编程，毕业能找份工作。不管什么学校，什么专业，靠的是自己，教学多么好还是差，学霸和学渣都会有……</p>
<p>大三，第二学期我做了考研的打算，当时也报了培训班；最后由于自己心态问题，定不下心复习看书，当我把高数课本换成编程书籍的时候，我竟然能看下一整天……就这样，我的考研之路已经终止了。</p>
<p>大四，作为一个开发新入门的菜鸟，当时的我没什么要求，有份工作就行；有个环境能让我学习技术就好，我要逃出校园，因为校园太安逸，迷茫；学长学姐、老师也没和我说就业的严峻性，编程学习上，也没有人指导，一个班里，对编程感兴趣了可能就两人，这编程道路上也是孤独的。对去什么公司和做什么事情那会儿也没多少想法，有公司来校招就去应聘了，公司是北京的。（当时没想过什么北漂，也不清楚什么是北漂咯，天真其实也挺好）</p>
<p>工作后，习惯总结了自身编程缺失的地方，晚上下班和周末的时候有时间就会留在公司学习，那时也有哥们一起上晚自习，有个伴确实好，学习过程中可以交流；（当时身边的同事总以为我们在加班，内心偷着乐呵呵的）。薪资上，作为一名985毕业的学生，工资算开发人员里边垫底的，我也清楚这是看技术水平开的，没计较什么，就惭愧一下，感叹一下自己大学都在干嘛了？然后就开始打鸡血励志了，瞬间就会充满学习的动力；因为喜欢编程，所以相信自己的技术肯定会越学越好。</p>
<p>同事+舍友，公司里的同事总体都不错，项目经理和领导都很好，别人都说这是小公司比较好的情况，大公司就不一样了。舍友都是刚毕业一起实习最后一起工作的，一起住了单位宿舍，也一起合租过，相处的挺欢乐，有爱专研技术的，这个算是兴趣一样的地方，也有爱打篮球的伴。所以我觉得是幸运的，因为我是两者的受益者。一起玩的还有同部门的两个妹子（不过离职的比较早，但后边还偶尔联系着），总共7人，我们相处的不错，感觉就像大学同学般，这可能是刚毕业+第一份工作，大家遇到好玩的人吧，以后就难咯……</p>
<p>北京生活，我是比较宅，在北京没怎么玩，工作一年半也就去了后海，天安门，王府井，西单，鸟巢，香山，几个校园。大多好玩的都没去，因为身边的舍友太尼玛宅了，感觉我起初是没那么宅的，后边可能受影响，越来越宅。公司有个别的同事在北京工作半年多还没去过天安门的……（原因估计是没妹子约）。总的来说，在北京，如果考虑到买房买车，或者是经济自由，那确实是压力大。</p>
<p>2015年7月，我搬出来自己租房，顿时就感受到了经济上的一些压力。学习上，时间相对多点了，一方面公司的项目不多，另一方面，可能是租房环境比较安静，适合学习。后半年自己学习方向也越来越明确，也常逛开发社区，在github上更加活跃了；关注了很多大牛，作为学习的目标并超越。</p>
<p>2015年终，拿了积极进取奖，并拿到了人生第一份年终奖；工资和刚入职比翻了倍。</p>
<p>2015年学习使用的技术栈有：</p>
<p><code>nodejs</code>,<code>bootstrap</code>,<code>vue.js</code>,<code>jfinal</code>,<code>jade</code>,<code>mongodb</code>……</p>
<p>2016年，继续前端技术的学习；继续github；认识更多大牛和前辈；进军互联网！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014年7月，毕业工作，成为了一名程序猿，我算是误打误撞的进了it行业；公司是做gis相关的，工作是做web开发，平时也就写写JavaScript和html\css……，慢慢的，觉得乏味，偶然关注了互联网前端开发，发现目前工作并不算是真正的前端开发，从此，开始学习互联网前端开发相关技术，并热衷无法自拔……</p>]]>
    
    </summary>
    
      <category term="diary" scheme="http://giscafer.com/tags/diary/"/>
    
      <category term="随笔" scheme="http://giscafer.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="diary" scheme="http://giscafer.com/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里大鱼JavaScript SDK插件alidayujs]]></title>
    <link href="http://giscafer.com/2016/02/10/alidayujs-npm/"/>
    <id>http://giscafer.com/2016/02/10/alidayujs-npm/</id>
    <published>2016-02-10T13:11:06.000Z</published>
    <updated>2016-02-10T13:12:15.294Z</updated>
    <content type="html"><![CDATA[<p><code>alidayujs</code>是学习nodejs以来写的第一个<code>npm</code>插件，目前实现了短信发送接口的封装，其余语音等有时间再拓展吧。使用介绍见以下链接：</p>
<a id="more"></a>
<p>github源码:<a href="https://github.com/giscafer/alidayujs" target="_blank" rel="external">https://github.com/giscafer/alidayujs</a></p>
<p>npm地址：<a href="https://www.npmjs.com/package/alidayujs" target="_blank" rel="external">https://www.npmjs.com/package/alidayujs</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>alidayujs</code>是学习nodejs以来写的第一个<code>npm</code>插件，目前实现了短信发送接口的封装，其余语音等有时间再拓展吧。使用介绍见以下链接：</p>]]>
    
    </summary>
    
      <category term="NodeJS" scheme="http://giscafer.com/tags/NodeJS/"/>
    
      <category term="alidayujs" scheme="http://giscafer.com/tags/alidayujs/"/>
    
      <category term="npm" scheme="http://giscafer.com/tags/npm/"/>
    
      <category term="阿里大鱼sdk" scheme="http://giscafer.com/tags/%E9%98%BF%E9%87%8C%E5%A4%A7%E9%B1%BCsdk/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mongoDB查询统计之Map-Reduce方法]]></title>
    <link href="http://giscafer.com/2016/02/05/mongodb-map-reduce/"/>
    <id>http://giscafer.com/2016/02/05/mongodb-map-reduce/</id>
    <published>2016-02-05T08:44:56.000Z</published>
    <updated>2016-02-08T13:04:02.734Z</updated>
    <content type="html"><![CDATA[<h3 id="0、说明">0、说明</h3><a id="more"></a>
<p>官方给的Map-Reduce的流程如下图：</p>
<p><img src="https://docs.mongodb.org/manual/_images/map-reduce.png" alt="此处输入图片的描述"></p>
<p>该函数接收三个参数：<code>map</code>,<code>reduce</code>,{<code>query</code>,<code>output</code>}；其中<code>map</code>,<code>reduce</code>是方法，最后一个参数是对象，<br>该对象可以使用<code>query</code>作为查询过滤条件，<code>output</code>的意思是将结果保存在临时的集合里边，最后用来查询。</p>
<p>首先，数据库我存的订餐数据如下所示：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        "<span class="attribute">_id</span>" : <span class="value">ObjectId(<span class="string">"56b45c45ad1434e863ea1406"</span>)</span>,</span><br><span class="line">        "<span class="attribute">user_id</span>" : <span class="value">ObjectId(<span class="string">"568bbaa0e78f752802a65a7b"</span>)</span>,</span><br><span class="line">        "<span class="attribute">dish_name</span>" : <span class="value"><span class="string">"韭菜鸡蛋"</span></span>,</span><br><span class="line">        "<span class="attribute">deleted</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">update_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:24:37.761Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">create_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:24:37.761Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">ispack</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">dish_price</span>" : <span class="value"><span class="number">12</span></span>,</span><br><span class="line">        "<span class="attribute">__v</span>" : <span class="value"><span class="number">0</span></span><br><span class="line"></span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">        "<span class="attribute">_id</span>" : <span class="value">ObjectId(<span class="string">"56b45c5fad1434e863ea1407"</span>)</span>,</span><br><span class="line">        "<span class="attribute">user_id</span>" : <span class="value">ObjectId(<span class="string">"568bbaa0e78f752802a65a7b"</span>)</span>,</span><br><span class="line">        "<span class="attribute">dish_name</span>" : <span class="value"><span class="string">"红烧鸡块"</span></span>,</span><br><span class="line">        "<span class="attribute">deleted</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">update_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:25:03.070Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">create_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:25:03.070Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">ispack</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">dish_price</span>" : <span class="value"><span class="number">15</span></span>,</span><br><span class="line">        "<span class="attribute">__v</span>" : <span class="value"><span class="number">0</span></span><br><span class="line"></span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">        "<span class="attribute">_id</span>" : <span class="value">ObjectId(<span class="string">"56b45c66ad1434e863ea1408"</span>)</span>,</span><br><span class="line">        "<span class="attribute">user_id</span>" : <span class="value">ObjectId(<span class="string">"568bbaa0e78f752802a65a7b"</span>)</span>,</span><br><span class="line">        "<span class="attribute">dish_name</span>" : <span class="value"><span class="string">"耗油生菜"</span></span>,</span><br><span class="line">        "<span class="attribute">deleted</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">update_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:25:10.002Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">create_at</span>" : <span class="value">ISODate(<span class="string">"2016-02-05T08:25:10.002Z"</span>)</span>,</span><br><span class="line">        "<span class="attribute">ispack</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">dish_price</span>" : <span class="value"><span class="number">13</span></span>,</span><br><span class="line">        "<span class="attribute">__v</span>" : <span class="value"><span class="number">0</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>下边会介绍对这些数据进行查询统计！</p>
<h3 id="1、map方法">1、map方法</h3><p>先看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cate=<span class="keyword">this</span>.dish_name;<span class="comment">//以菜名进行统计</span></span><br><span class="line">    emit(cate,&#123;price:<span class="keyword">this</span>.dish_price&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>map方法里面会调用<code>emit(key, value)</code>，mongodb集合会按照指定的<code>key</code>进行映射分组, 类似关系型数据库的<code>group by</code>,<br>目的是<code>group by</code>上面map后的结果，最终为：按照cate分组, 分组结果是{name: this.name}的list。</p>
<h3 id="2、reduce方法">2、reduce方法</h3><p>（遍历map的结果，统计订单中每种盖饭的总数和总价格）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reduce=<span class="function"><span class="keyword">function</span>(<span class="params">key,values</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> totalCost=<span class="number">0</span>;</span><br><span class="line">    values.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</span><br><span class="line">        sum+=<span class="number">1</span></span><br><span class="line">        totalCost+=order.price;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;count:sum,cost:totalCost&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、执行mapReduce方法">3、执行mapReduce方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.orders.mapReduce(map,reduce,&#123;out:<span class="string">"order_results"</span>&#125;);<span class="comment">//执行查询统计（这里没加query查询条件）</span></span><br><span class="line">db.order_results.find();<span class="comment">//查看结果，order_results就是out参数的写的临时集合</span></span><br></pre></td></tr></table></figure>
<p>查询结果如下，最终的集合里边，<code>_id</code>就是<code>cate</code>,<code>value</code>就是统计的值了。</p>
<blockquote>
<p>{ “_id” : “红烧鸡块”, “value” : { “count” : 2, “cost” : 30 } }<br>{ “_id” : “耗油生菜”, “value” : { “count” : 2, “cost” : 26 } }</p>
</blockquote>
<p>统计示例见：<a href="http://vueorder.duapp.com/charts" target="_blank" rel="external">订餐统计</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="0、说明">0、说明</h3>]]>
    
    </summary>
    
      <category term="mapReduce" scheme="http://giscafer.com/tags/mapReduce/"/>
    
      <category term="mongoDB" scheme="http://giscafer.com/tags/mongoDB/"/>
    
      <category term="mongoDB统计" scheme="http://giscafer.com/tags/mongoDB%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="mongoDB" scheme="http://giscafer.com/categories/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NodeJS开发常见错误A&Q]]></title>
    <link href="http://giscafer.com/2016/02/05/nodejs-overflow-question/"/>
    <id>http://giscafer.com/2016/02/05/nodejs-overflow-question/</id>
    <published>2016-02-05T06:18:08.000Z</published>
    <updated>2016-03-26T16:14:09.998Z</updated>
    <content type="html"><![CDATA[<h2 id="0、NodeJS调试介绍">0、NodeJS调试介绍</h2><p>级别从高到低，推荐到不推荐：</p>
<ol>
<li>ttd/bdd测试驱动</li>
<li>node-inspector，vsc编辑器，webstrom；</li>
<li>node-debug</li>
<li>console.log</li>
</ol>
<a id="more"></a>
<h2 id="1、CookieParser错误">1、CookieParser错误</h2><p><code>throw new Error(&#39;cookieParser(&quot;secret&quot;) required for signed cookies&#39;);</code><br>提示：<strong>Error: cookieParser(“secret”) required for signed cookies</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser(config.auth_cookie_name));//&#36825;&#37324;cookieParser(&#34;secret&#34;)&#38656;&#35201;&#25351;&#23450;&#20869;&#23481;&#34;secret&#34;&#10;//&#22240;&#20026;&#29256;&#26412;&#38382;&#39064;&#65292;&#36825;&#37324;&#22353;&#37324;&#22909;&#19968;&#20250;&#10;app.use(session(&#123;&#10;  secret:config.session_secret,&#10;  key: config.auth_cookie_name, //&#36825;&#37324;auth_cookie_name&#23601;&#26159;&#25351;&#23450;&#20869;&#23481;&#34;secret&#34;&#10;  cookie: &#123;maxAge: 1000 * 60 * 60 * 24 * 30&#125;,//30 days&#10;  resave: false,&#10;  saveUninitialized: true,&#10;  store: new MongoStore(&#123;&#10;    url: config.dev_dbUrl&#10;  &#125;)&#10;&#125;));</span><br></pre></td></tr></table></figure>
<p>出现以上问题可能是在代码中使用类似<code>var auth_token = req.signedCookies[config.auth_cookie_name];</code>代码，如果没用，以上直接使用<code>pp.use(cookieParser());</code>即可。</p>
<p>参考解决：<br><a href="https://segmentfault.com/a/1190000004139342" target="_blank" rel="external">https://segmentfault.com/a/1190000004139342</a><br><a href="http://stackoverflow.com/questions/20112876/cookieparser-and-cookiesession-middleware-in-expressjs" target="_blank" rel="external">http://stackoverflow.com/questions/20112876/cookieparser-and-cookiesession-middleware-in-expressjs</a></p>
<h2 id="2、Cast_to_ObjectId_failed_for_value">2、Cast to ObjectId failed for value</h2><p>错误大致：</p>
<pre><code><span class="number">500</span> <span class="string">CastError:</span> Cast to ObjectId failed <span class="keyword">for</span> value <span class="string">"Mp0uah2G6TJVwPhOQ2sSZ10yklPkmbRV"</span> at path <span class="string">"_id"</span>
 at MongooseError.CastError (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>error/cast.<span class="string">js:</span><span class="number">19</span>:<span class="number">11</span>)
 at ObjectId.cast (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>schema/objectid.<span class="string">js:</span><span class="number">134</span>:<span class="number">13</span>)
 at ObjectId.castForQuery (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>schema/objectid.<span class="string">js:</span><span class="number">173</span>:<span class="number">17</span>)
 at module.exports (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>cast.<span class="string">js:</span><span class="number">205</span>:<span class="number">32</span>)
 at Query.cast (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>query.<span class="string">js:</span><span class="number">2533</span>:<span class="number">10</span>)
 at Query.findOne (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>query.<span class="string">js:</span><span class="number">1239</span>:<span class="number">10</span>)
 at Function.findOne (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>mongoose<span class="regexp">/lib/</span>model.<span class="string">js:</span><span class="number">1254</span>:<span class="number">13</span>)
 at Object.exports.getUserById (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>src<span class="regexp">/server/</span>proxy/user.<span class="string">js:</span><span class="number">39</span>:<span class="number">7</span>)
 at exports.authUser (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>src<span class="regexp">/server/</span>common/auth.<span class="string">js:</span><span class="number">114</span>:<span class="number">19</span>)
 at Layer.handle [<span class="keyword">as</span> handle_request] (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express<span class="regexp">/lib/</span>router/layer.<span class="string">js:</span><span class="number">95</span>:<span class="number">5</span>)
 at trim_prefix (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express<span class="regexp">/lib/</span>router/index.<span class="string">js:</span><span class="number">312</span>:<span class="number">13</span>)
 at <span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express<span class="regexp">/lib/</span>router/index.<span class="string">js:</span><span class="number">280</span>:<span class="number">7</span>
 at Function.process_params (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express<span class="regexp">/lib/</span>router/index.<span class="string">js:</span><span class="number">330</span>:<span class="number">12</span>)
 at next (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express<span class="regexp">/lib/</span>router/index.<span class="string">js:</span><span class="number">271</span>:<span class="number">10</span>)
 at <span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>express-session/index.<span class="string">js:</span><span class="number">437</span>:<span class="number">7</span>
 at Command.callback (<span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>connect-redis<span class="regexp">/lib/</span>connect-redis.<span class="string">js:</span><span class="number">158</span>:<span class="number">14</span>)
</code></pre><p>这个问题可能和<code>1问题</code>有相关，如果不是，参考以下解决方案：</p>
<p><a href="http://stackoverflow.com/questions/15771470/mongoose-cast-to-objectid-failed-for-value" target="_blank" rel="external">http://stackoverflow.com/questions/15771470/mongoose-cast-to-objectid-failed-for-value</a></p>
<p><a href="http://stackoverflow.com/questions/25380388/error-casterror-cast-to-objectid-failed-for-value-at-path-id" target="_blank" rel="external">http://stackoverflow.com/questions/25380388/error-casterror-cast-to-objectid-failed-for-value-at-path-id</a></p>
<h2 id="3、model对象赋值不成功，需要创建字段。">3、model对象赋值不成功，需要创建字段。</h2><p>目前通过schema创建字段解决。原因未知。</p>
<h2 id="4、SyntaxError:_Use_of_const_in_strict_mode-">4、SyntaxError: Use of const in strict mode.</h2><pre><code><span class="regexp">/home/</span>bae<span class="regexp">/app/</span>.bae<span class="regexp">/node_modules/</span>connect-mongo<span class="regexp">/src/</span>index.<span class="string">js:</span><span class="number">3</span>
const Promise = require(<span class="string">'bluebird'</span>);
^^^^^
<span class="string">SyntaxError:</span> Use of const <span class="keyword">in</span> strict mode.
</code></pre><h2 id="5、Error:_Can’t_set_headers_after_they_are_sent-">5、Error: Can’t set headers after they are sent.</h2><p><code>Can’t set headers after they are sent.</code> =&gt; <code>不能发送headers因为已经发送过一次了</code> =&gt; 在处理HTTP请求时，服务器会先输出响应头，<br>然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），<br>你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</p>
<p>（说明：express中的 res.header() 相当于 res.writeHead() ，res.send() 相当于 res.write() ）</p>
<p>原因就是你程序有问题，重复作出响应，具体原因很多，需要自己根据以上的原则来排除。</p>
<p>解决：<code>在一个回调函数前边应该加一个return</code></p>
<p>参考：</p>
<p><a href="https://cnodejs.org/topic/53774ffecbcc396349ca1155" target="_blank" rel="external">https://cnodejs.org/topic/53774ffecbcc396349ca1155</a></p>
<p><a href="http://stackoverflow.com/questions/7042340/node-js-error-cant-set-headers-after-they-are-sent" target="_blank" rel="external">http://stackoverflow.com/questions/7042340/node-js-error-cant-set-headers-after-they-are-sent</a></p>
<h2 id="6、Redis:ERR_wrong_number_of_arguments_for_‘set’_command">6、Redis:ERR wrong number of arguments for ‘set’ command</h2><p>将<a href="https://github.com/giscafer/Vue-order" target="_blank" rel="external">Vue-order</a>部署BAE的时候遇到此Redis报错问题，系统访问就会报此错误 最后查出是因为connect-redis插件版本引起的；（该原因也可能是代码引起）</p>
<h2 id="7、express-session_deprecated_cookie_should_be_available_in_req-headers-cookie">7、express-session deprecated cookie should be available in req.headers.cookie</h2><p><a href="https://segmentfault.com/a/1190000004139342" target="_blank" rel="external">https://segmentfault.com/a/1190000004139342</a><br><a href="https://github.com/expressjs/session/issues/62" target="_blank" rel="external">https://github.com/expressjs/session/issues/62</a></p>
<h2 id="8、Error:_Argument_passed_in_must_be_a_single_String_of_12_bytes_or_a_string_of_24_hex_characters">8、Error: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters</h2><p>必须是24位16进制的字符，或者一个12字节的字符串</p>
<p><a href="http://stackoverflow.com/questions/26453507/argument-passed-in-must-be-a-single-string-of-12-bytes" target="_blank" rel="external">http://stackoverflow.com/questions/26453507/argument-passed-in-must-be-a-single-string-of-12-bytes</a></p>
<p><a href="https://docs.mongodb.org/manual/reference/object-id/" target="_blank" rel="external">https://docs.mongodb.org/manual/reference/object-id/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="0、NodeJS调试介绍">0、NodeJS调试介绍</h2><p>级别从高到低，推荐到不推荐：</p>
<ol>
<li>ttd/bdd测试驱动</li>
<li>node-inspector，vsc编辑器，webstrom；</li>
<li>node-debug</li>
<li>console.log</li>
</ol>]]>
    
    </summary>
    
      <category term="NodeJS" scheme="http://giscafer.com/tags/NodeJS/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bluebird(Promise/A+)介绍]]></title>
    <link href="http://giscafer.com/2016/02/04/bluebird-api-study/"/>
    <id>http://giscafer.com/2016/02/04/bluebird-api-study/</id>
    <published>2016-02-04T06:58:29.000Z</published>
    <updated>2016-02-04T08:25:57.459Z</updated>
    <content type="html"><![CDATA[<h2 id="一、Promises/A+规范">一、Promises/A+规范</h2><h3 id="Promise">Promise</h3><p>是一个拥有<code>then</code>方法的对象或函数，起行为符合本规范；</p>
<h3 id="thenable">thenable</h3><p>是一个定义了<code>then</code>方法的对象或函数，即<code>拥有then方法</code>；</p>
<p>详情介绍见文章<a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="external">《Promises/A+规范》</a></p>
<h2 id="二、bluebird">二、bluebird</h2><p>之前做node.js项目的时候一直使用朴灵的<code>eventproxy</code>来处理异步或者回调，<code>eventproxy</code>采用的是事件机制，使用也挺方便。<br>现在也了解一下备受欢迎的<code>bluebird</code>——<a href="http://bluebirdjs.com/" target="_blank" rel="external">官网</a>，bb的API文档很全很详细。<br><a id="more"></a></p>
<h3 id="-promisifyAll">.promisifyAll</h3><p>官方API说明：</p>
<blockquote>
<p>Promisifies the entire object by going through the object’s properties and creating an async equivalent of each function on the object and its prototype chain. The promisified method name will be the original method name suffixed with suffix (default is “Async”). Any class properties of the object (which is the case for the main export of many modules) are also promisified, both static and instance methods. Class property is a property with a function value that has a non-empty .prototype object. Returns the input object.</p>
</blockquote>
<p>大概意思就是，<code>Promise.promisifyAll</code>方法接收一个对象，会遍历对象中的方法并克隆该方法并在其后加上<code>Async</code>字符。也就是说会多出一样的方法，只不过都带<code>Async</code>（异步）的后缀。如果想将对象原型链上的方法也加上的话，则传入对象的原型即可，例如 <code>Promise.promisifyAll(obj.prototype)</code>，返回的是该对象。</p>
<h3 id="-then">.then</h3><p>类似原生Promise/A+规范的then方法：</p>
<blockquote>
<p>.then(<br>    [function(any value) fulfilledHandler],<br>    [function(any error) rejectedHandler]<br>    ) -&gt; Promise</p>
</blockquote>
<p><strong>例子：</strong>（then和promisifyAll的使用）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span>=<span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">'fs'</span>));</span><br><span class="line"><span class="keyword">var</span> onFulfilled=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> onRejected=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'报错啦--'</span>,e)</span><br><span class="line">&#125;</span><br><span class="line">fs.readFileAsync(<span class="string">'package.json'</span>, <span class="string">"utf8"</span>).then(onFulfilled,onRejected);</span><br></pre></td></tr></table></figure></p>
<h3 id="-catch">.catch</h3><p>更方便的是，<code>bluebird</code>提供了<code>.catch</code>方法，可以在”链式”的操作上捕获异常，如上边的例子可以改写为如下方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fs.readFileAsync(<span class="string">'package.json'</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//只需要关注成功的时候</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;<span class="comment">//轻松处理所有出现的异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>此外，还可以区别捕获不同的异常，分别处理，只需要指定异常的类型（如<code>TypeError</code>,<code>ReferenceError</code>,<code>NetworkError</code>等）即可（和java的异常类型处理类似吧？）</p>
<p>例子1，区分不同错误类型捕捉：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">somePromise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b.c.d();</span><br><span class="line">&#125;).catch(<span class="built_in">TypeError</span>, <span class="built_in">ReferenceError</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//程序异常捕获</span></span><br><span class="line">&#125;).catch(NetworkError, TimeoutError, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//网络异常捕获</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//捕获所有其他异常</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>例子2，捕捉找不到文件报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readFileAsync(<span class="string">'package.jsn'</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(&#123; code: <span class="string">'ENOENT'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"file not found: "</span> + e.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="集合相关的方法">集合相关的方法</h3><p><code>.all</code>方法可以处理一个数组内的所有方法，处理完毕返回信息，如例子异步创建10个文件后，返回成功信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> files = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    files.push(fs.writeFileAsync(<span class="string">"file-"</span> + i + <span class="string">".txt"</span>, <span class="string">""</span>, <span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all(files).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"all the files were created"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>还有其他好用的方法，需要的时候去了解一下API文档，根据实际情况使用即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一、Promises/A+规范">一、Promises/A+规范</h2><h3 id="Promise">Promise</h3><p>是一个拥有<code>then</code>方法的对象或函数，起行为符合本规范；</p>
<h3 id="thenable">thenable</h3><p>是一个定义了<code>then</code>方法的对象或函数，即<code>拥有then方法</code>；</p>
<p>详情介绍见文章<a href="http://www.ituring.com.cn/article/66566">《Promises/A+规范》</a></p>
<h2 id="二、bluebird">二、bluebird</h2><p>之前做node.js项目的时候一直使用朴灵的<code>eventproxy</code>来处理异步或者回调，<code>eventproxy</code>采用的是事件机制，使用也挺方便。<br>现在也了解一下备受欢迎的<code>bluebird</code>——<a href="http://bluebirdjs.com/">官网</a>，bb的API文档很全很详细。<br>]]>
    
    </summary>
    
      <category term="bluebird" scheme="http://giscafer.com/tags/bluebird/"/>
    
      <category term="promise" scheme="http://giscafer.com/tags/promise/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NodeJS实现阿里大鱼短信通知发送]]></title>
    <link href="http://giscafer.com/2016/01/16/alidayu-sign-nodejs/"/>
    <id>http://giscafer.com/2016/01/16/alidayu-sign-nodejs/</id>
    <published>2016-01-16T02:49:20.000Z</published>
    <updated>2016-01-19T10:59:34.942Z</updated>
    <content type="html"><![CDATA[<h3 id="1、说明">1、说明</h3><p>阿里大鱼提供了验证码，短信通知，语音等服务，在使用后感觉挺方便，不愧是阿里旗下的产品。</p>
<p>最近想搞个NodeJS发送短信通知的功能，这里没有使用<code>alidayujs</code>（这个是本人后来封装的。如果使用<a href="https://github.com/giscafer/alidayujs" target="_blank" rel="external">alidayujs</a>那就简单了。），自己整一个签名sign，实现短信发送。</p>
<a id="more"></a>
<p>官方的<a href="http://open.taobao.com/doc2/detail.htm?articleId=101617&amp;docType=1&amp;treeId=1" target="_blank" rel="external">文档</a>说明了签名<code>sign</code>的生成步骤，不过第三步骤:</p>
<blockquote>
<p>3、连接字符串 连接参数名与参数值,并在首尾加上secret</p>
</blockquote>
<p>如果使用hmac方式加密（sign_method: ‘hmac’），则不需要<code>首尾加上secret</code>，md5则需要</p>
<h3 id="2、代码实现">2、代码实现</h3><p><strong>生成<code>sign</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line"> * 根据淘宝官网提供的教程</span><br><span class="line"> * http://open.taobao.com/doc2/detail.htm?articleId=101617&amp;docType=1&amp;treeId=1</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">"blueimp-md5"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淘宝应用App信息(换成自己的)</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    AppKey: <span class="string">'233002**'</span>,</span><br><span class="line">    AppSecret: <span class="string">'3403636b338e100399**'</span></span><br><span class="line">&#125;;</span><br><span class="line">exports.config=config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dySign = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 生成时间戳</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> timestamp = time.getFullYear()  + <span class="string">"-"</span> +</span><br><span class="line">        (<span class="string">"0"</span> + (time.getMonth() + <span class="number">1</span>)).slice(-<span class="number">2</span>) + <span class="string">"-"</span> +</span><br><span class="line">        (<span class="string">"0"</span> + time.getDate()).slice(-<span class="number">2</span>) + <span class="string">' '</span>  +</span><br><span class="line">        (<span class="string">"0"</span> + time.getHours()).slice(-<span class="number">2</span>)   + <span class="string">":"</span> +</span><br><span class="line">        (<span class="string">"0"</span> + time.getMinutes()).slice(-<span class="number">2</span>) + <span class="string">":"</span> +</span><br><span class="line">        (<span class="string">"0"</span> + time.getSeconds()).slice(-<span class="number">2</span>);</span><br><span class="line">    obj.timestamp = timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序key</span></span><br><span class="line">    obj.app_key = config.AppKey;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="comment">// 循环添加参数项</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        arr.push(p + obj[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、按首字母升序排列</span></span><br><span class="line">    arr.sort();</span><br><span class="line">    <span class="comment">// 3、连接字符串</span></span><br><span class="line">    <span class="keyword">var</span> msg =  arr.join(<span class="string">''</span>);</span><br><span class="line">    <span class="comment">// console.log(msg);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成签名 sign hmac</span></span><br><span class="line">    <span class="keyword">var</span> sign = md5(msg, config.AppSecret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> sign.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.dySign = dySign;</span><br></pre></td></tr></table></figure></p>
<p><strong>拼接字符串并发送请求</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> signGenerate = <span class="built_in">require</span>(<span class="string">'./create_dysign'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alidayuUrl = <span class="string">'http://gw.api.taobao.com/router/rest'</span>;</span><br><span class="line"><span class="comment">// 短信发送的参数对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    format: <span class="string">'json'</span>,</span><br><span class="line">    method: <span class="string">'alibaba.aliqin.fc.sms.num.send'</span>,</span><br><span class="line">    v: <span class="string">'2.0'</span>,</span><br><span class="line">    timestamp: <span class="string">'2016-1-16 02:33:30'</span>,</span><br><span class="line">    partner_id: <span class="string">'top-sdk-nodejs-20160116'</span>,</span><br><span class="line">    rec_num: <span class="string">'15110****'</span>, <span class="comment">//手机号多个以逗号间隔</span></span><br><span class="line">    sign_method: <span class="string">'hmac'</span>,</span><br><span class="line">    sms_type: <span class="string">'normal'</span>,</span><br><span class="line">    sms_param: <span class="string">'&#123;"code":"giscafer","product":"alidayu短信测试"&#125;'</span>,</span><br><span class="line">    sms_free_sign_name: <span class="string">'身份验证'</span>,</span><br><span class="line">    sms_template_code: <span class="string">'SMS_4725038'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成签名并拼接请求参数链接</span></span><br><span class="line"><span class="keyword">var</span> sign = signGenerate.dySign(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'签名：'</span>, sign);</span><br><span class="line"></span><br><span class="line">obj.sign = sign;</span><br><span class="line">obj.app_key = signGenerate.config.AppKey;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    arr.push(p + <span class="string">'='</span> + obj[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> msg = arr.join(<span class="string">'&amp;'</span>)</span><br><span class="line"><span class="keyword">var</span> sendurl = alidayuUrl + <span class="string">'?'</span> + msg;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'完成请求地址：'</span> + sendurl);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 短信发送请求测试</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> params = qs.stringify(obj);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">'gw.api.taobao.com'</span>,</span><br><span class="line">    port: <span class="number">80</span>,</span><br><span class="line">    path: <span class="string">'/router/rest?'</span> + params,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</span><br><span class="line">    <span class="comment">// console.log('HEADERS: ' + JSON.stringify(res.headers));</span></span><br><span class="line">    <span class="comment">// console.log(req.path);</span></span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RESULT: '</span> + chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ERROR: '</span> + e.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// write data to request body</span></span><br><span class="line">req.write(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>
<p><strong>请求结果</strong></p>
<pre><code>{"<span class="attribute">alibaba_aliqin_fc_sms_num_send_response</span>":<span class="value">{"<span class="attribute">result</span>":<span class="value">{"<span class="attribute">err_code</span>":<span class="value"><span class="string">"0"</span></span>,"<span class="attribute">model</span>":<span class="value"><span class="string">"100545278271^1100912293896"</span></span>,"<span class="attribute">success</span>":<span class="value"><span class="literal">true</span></span>}</span>,"<span class="attribute">request_id</span>":<span class="value"><span class="string">"15q8um2g8w8ef"</span></span>}</span>}
</code></pre><p><img src="https://github.com/giscafer/alidayu-sign-nodejs/raw/master/images/screenshot.png" alt="此处输入图片的描述"></p>
<p><strong>源码demo</strong>——》<a href="https://github.com/giscafer/alidayu-sign-nodejs" target="_blank" rel="external">Github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、说明">1、说明</h3><p>阿里大鱼提供了验证码，短信通知，语音等服务，在使用后感觉挺方便，不愧是阿里旗下的产品。</p>
<p>最近想搞个NodeJS发送短信通知的功能，这里没有使用<code>alidayujs</code>（这个是本人后来封装的。如果使用<a href="https://github.com/giscafer/alidayujs">alidayujs</a>那就简单了。），自己整一个签名sign，实现短信发送。</p>]]>
    
    </summary>
    
      <category term="NodeJS" scheme="http://giscafer.com/tags/NodeJS/"/>
    
      <category term="短信发送" scheme="http://giscafer.com/tags/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81/"/>
    
      <category term="阿里大鱼" scheme="http://giscafer.com/tags/%E9%98%BF%E9%87%8C%E5%A4%A7%E9%B1%BC/"/>
    
      <category term="NodeJS" scheme="http://giscafer.com/categories/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AMD构建（gulp插件amd-optimize的使用）]]></title>
    <link href="http://giscafer.com/2015/12/02/amd-optimize-gulp/"/>
    <id>http://giscafer.com/2015/12/02/amd-optimize-gulp/</id>
    <published>2015-12-02T12:11:16.000Z</published>
    <updated>2015-12-02T12:21:57.579Z</updated>
    <content type="html"><![CDATA[<p>这里所说的<code>AMD</code>构建，是指<code>AMD</code>定义模块方式的代码构建。AMD=异步定义模块，具体查看官方<a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="external">AMD</a>解释。</p>
<p>首先，所谓构建就是将多个文件合并压缩等，但是对于<code>AMD</code>定义的模块来说，模块之间存在这依赖关系，<code>AMD</code>构建主要就是解决这种模块之间的依赖关系，构建的方式很多种，下边是gulp 的<code>amd-optimize</code>插件构建笔记。<br><a id="more"></a></p>
<h3 id="使用gulp对AMD模块构建">使用gulp对AMD模块构建</h3><p>需要三个插件 <code>gulp amd-optimize gulp-concat</code></p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> gulp amd-<span class="keyword">optimize</span> gulp-<span class="keyword">concat</span> <span class="comment">--save-dev</span></span>
</code></pre><p>创建gulpfile.js文件，内容如下：</p>
<pre><code><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);
<span class="keyword">var</span> amdOptimize = <span class="built_in">require</span>(<span class="string">"amd-optimize"</span>);
<span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);

gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
  <span class="keyword">return</span> gulp.src(<span class="string">"app/**/*.js"</span>) <span class="comment">//需要合并的代码</span>
    .pipe(amdOptimize(<span class="string">"app"</span>))   <span class="comment">//主入口文件</span>
    .pipe(concat(<span class="string">"result.js"</span>))  <span class="comment">//合并后文件</span>
    .pipe(gulp.dest(<span class="string">"dist"</span>));  <span class="comment">//输出目录</span>

});
</code></pre><p>工程中，app/index/a.js代码：</p>
<pre><code>define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>) </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>{
        <span class="built_in">console</span>.log(<span class="string">"this is the module a"</span>);
    }
    exports.fn=fn;
});
</code></pre><p>app/script/b.js代码：</p>
<pre><code>define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>) </span>{
    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'../index/a'</span>);
    a.fn();
    <span class="built_in">console</span>.log(<span class="string">"i am module b"</span>);

    <span class="built_in">console</span>.log(<span class="string">"b has finished"</span>);
});
</code></pre><p>根目录下app.js入口文件内容：</p>
<pre><code>define([<span class="string">'script/b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>{
    <span class="built_in">console</span>.log(<span class="string">" module c"</span>);

    <span class="built_in">console</span>.log(<span class="string">"c finished"</span>);
});
</code></pre><p>执行构建后，在dist下就会输出result.js文件代码如下</p>
<pre><code>  define(<span class="string">'index/a'</span>, [
    <span class="string">'require'</span>,
    <span class="string">'exports'</span>,
    <span class="string">'module'</span>
], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>{
        <span class="built_in">console</span>.log(<span class="string">'this is the module a'</span>);
    }
    exports.fn = fn;
});
define(<span class="string">'script/b'</span>, [
    <span class="string">'require'</span>,
    <span class="string">'exports'</span>,
    <span class="string">'module'</span>,
    <span class="string">'index/a'</span>
], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>{
    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'../index/a'</span>);
    a.fn();
    <span class="built_in">console</span>.log(<span class="string">'i am module b'</span>);
    <span class="built_in">console</span>.log(<span class="string">'b has finished'</span>);
});
define(<span class="string">'app'</span>, [<span class="string">'script/b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>{
    <span class="built_in">console</span>.log(<span class="string">' module c'</span>);
    <span class="built_in">console</span>.log(<span class="string">'c finished'</span>);
});
</code></pre><p>可见，会解决package内部模块之间的项目依赖</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里所说的<code>AMD</code>构建，是指<code>AMD</code>定义模块方式的代码构建。AMD=异步定义模块，具体查看官方<a href="https://github.com/amdjs/amdjs-api">AMD</a>解释。</p>
<p>首先，所谓构建就是将多个文件合并压缩等，但是对于<code>AMD</code>定义的模块来说，模块之间存在这依赖关系，<code>AMD</code>构建主要就是解决这种模块之间的依赖关系，构建的方式很多种，下边是gulp 的<code>amd-optimize</code>插件构建笔记。<br>]]>
    
    </summary>
    
      <category term="AMD" scheme="http://giscafer.com/tags/AMD/"/>
    
      <category term="gulp" scheme="http://giscafer.com/tags/gulp/"/>
    
      <category term="前端构建" scheme="http://giscafer.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="AMD" scheme="http://giscafer.com/categories/AMD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么，你还不懂前端自动化构建？]]></title>
    <link href="http://giscafer.com/2015/11/30/gulp-front-end-automated-builds/"/>
    <id>http://giscafer.com/2015/11/30/gulp-front-end-automated-builds/</id>
    <published>2015-11-30T14:29:09.000Z</published>
    <updated>2015-12-02T12:14:30.638Z</updated>
    <content type="html"><![CDATA[<p>如果你是搞前端开发的，或者你每天都在写CSS、JavaScript等前端编程语言代码，如果你不知道什么叫前端自动化构建，那一般只有两种情况：</p>
<ol>
<li>你在传统软件行业，用着4、5年前网页开发方式工作;</li>
<li>你并不是一个真正的Front End Software Engineer；</li>
</ol>
<h3 id="什么是前端构建工具？">什么是前端构建工具？</h3><p>前端构建工具——实现前端代码的编译（sass、less）、压缩、测试；图片的压缩以及浏览器自动刷新等等功能。</p>
<p>目前流行的三大前端构建工具<code>grunt</code>、<code>gulp</code>、<code>fis3</code>，他们都是基于Node.js的插件工具。前两个是国外出品，fis3是百度国产。fis3听说还不错，但是还没使用过，之前学习NodeJS使用的是grunt,感觉这东西挺牛。智能、前端自动化。听说<code>gulp</code>比<code>grunt</code>好用些，所以就研究一下吧。</p>
<a id="more"></a>
<p>以下是学习笔记，官方gulp工具介绍见<a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md" target="_blank" rel="external">github</a></p>
<h3 id="一、安装gulp工具到全局环境">一、安装gulp工具到全局环境</h3><p><code>（前提安装了NodeJS和NPM）</code></p>
<pre><code>$  <span class="built_in">npm</span> install --<span class="built_in">global</span> gulp
</code></pre><h3 id="二、接着进入项目根目录下，安装gulp开发依赖环境">二、接着进入项目根目录下，安装gulp开发依赖环境</h3><p><code>如果项目下没有package.json文件，请阅读下边步骤再继续此步骤</code></p>
<pre><code>$  npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp
</code></pre><h3 id="（二）生成package-json">（二）生成package.json</h3><pre><code><span class="built_in">npm</span> init
</code></pre><p>输入<code>npm init</code>，回车回车即可生成</p>
<h3 id="三、安装必要的Gulp插件">三、安装必要的Gulp插件</h3><ul>
<li>压缩css（gulp-minify-css）</li>
<li>js代码校验（gulp-jshint）</li>
<li>合并js文件（gulp-concat）</li>
<li>压缩js代码（gulp-uglify）</li>
<li>压缩图片（gulp-imagemin）</li>
<li>文件重命名 （gulp-rename）</li>
<li>自动刷新页面（gulp-livereload）</li>
<li>更改提醒（gulp-notify）</li>
<li>合并js顺序（gulp-order）（<a href="https://github.com/sirlantis/gulp-order）" target="_blank" rel="external">https://github.com/sirlantis/gulp-order）</a></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  npm <span class="operator"><span class="keyword">install</span> gulp-minify-css gulp-jshint gulp-<span class="keyword">concat</span> gulp-uglify gulp-imagemin gulp-notify gulp-livereload gulp-rename <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<p>安装完后 package.json文件内容如下：</p>
<pre><code>  {
"<span class="attribute">name</span>": <span class="value"><span class="string">"goodgis"</span></span>,
"<span class="attribute">version</span>": <span class="value"><span class="string">"1.0.0"</span></span>,
"<span class="attribute">description</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">main</span>": <span class="value"><span class="string">"main.js"</span></span>,
"<span class="attribute">directories</span>": <span class="value">{
  "<span class="attribute">test</span>": <span class="value"><span class="string">"test"</span>
</span>}</span>,
"<span class="attribute">dependencies</span>": <span class="value">{
  "<span class="attribute">gulp</span>": <span class="value"><span class="string">"^3.9.0"</span>
</span>}</span>,
"<span class="attribute">devDependencies</span>": <span class="value">{
  "<span class="attribute">gulp</span>": <span class="value"><span class="string">"^3.9.0"</span></span>,
  "<span class="attribute">gulp-concat</span>": <span class="value"><span class="string">"^2.6.0"</span></span>,
  "<span class="attribute">gulp-imagemin</span>": <span class="value"><span class="string">"^2.4.0"</span></span>,
  "<span class="attribute">gulp-jshint</span>": <span class="value"><span class="string">"^2.0.0"</span></span>,
  "<span class="attribute">gulp-livereload</span>": <span class="value"><span class="string">"^3.8.1"</span></span>,
  "<span class="attribute">gulp-minify-css</span>": <span class="value"><span class="string">"^1.2.1"</span></span>,
  "<span class="attribute">gulp-notify</span>": <span class="value"><span class="string">"^2.2.0"</span></span>,
  "<span class="attribute">gulp-rename</span>": <span class="value"><span class="string">"^1.2.2"</span></span>,
  "<span class="attribute">gulp-uglify</span>": <span class="value"><span class="string">"^1.5.1"</span></span>,
  "<span class="attribute">jshint</span>": <span class="value"><span class="string">"^2.8.0"</span>
</span>}</span>,
"<span class="attribute">scripts</span>": <span class="value">{
  "<span class="attribute">test</span>": <span class="value"><span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
</span>}</span>,
"<span class="attribute">author</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">license</span>": <span class="value"><span class="string">"ISC"</span>
  </span>}
</code></pre><h3 id="四、根目录下创建gulpfile-js文件">四、根目录下创建gulpfile.js文件</h3><p>代码如下，作用看注释</p>
<pre><code><span class="comment">//引入插件</span>
   <span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
       <span class="comment">// minifycss = require('gulp-minify-css'),</span>
       jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>), <span class="comment">//代码验证检查</span>
       uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>), <span class="comment">//压缩js代码</span>
       rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>), <span class="comment">//文件重命名</span>
       concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>), <span class="comment">//合并js文件</span>
       notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>), <span class="comment">//更改提醒</span>
       livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>); <span class="comment">//自动刷新页面</span>

   <span class="comment">//js代码校验、合并和压缩（类似jquery的链式操作，牛）</span>
   gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
       <span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.js'</span>) <span class="comment">//源文件</span>
           .pipe(jshint(<span class="string">'.jshintrc'</span>)) <span class="comment">//1、校验JS文件，jshint校验规则</span>
           .pipe(jshint.reporter(<span class="string">'default'</span>)) 
           .pipe(concat(<span class="string">'goodgis.js'</span>))  <span class="comment">//2、合并js文件，goodgis.js为合并的文件名称</span>
           .pipe(gulp.dest(<span class="string">'dist'</span>))  <span class="comment">//合并后文件存放位置</span>
           .pipe(rename({
               suffix: <span class="string">'.min'</span>
           }))
           .pipe(uglify())         <span class="comment">//3、执行压缩任务</span>
           .pipe(gulp.dest(<span class="string">'dist'</span>))  <span class="comment">//压缩后文件存放位置</span>
           .pipe(notify({    <span class="comment">//4、操作结束后提示</span>
               message: <span class="string">'Scripts task complete'</span>
           }));
   });
   <span class="comment">// 默认任务，这里完全可以是多个任务，比如压缩CSS，压缩图片，压缩js等</span>
   gulp.task(<span class="string">'default'</span>,[<span class="string">'watch'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
       gulp.start(<span class="string">'scripts'</span>);
   });
   <span class="comment">// 监听（前端自动化的情怀）</span>
   gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
       <span class="comment">// 监听 .js文件改动，一旦改动就会自动压缩合并</span>
       gulp.watch(<span class="string">'src/**/*.js'</span>, [<span class="string">'scripts'</span>]);
       <span class="comment">// Create LiveReload server（用来自动刷新浏览器）</span>
       livereload.listen();
       <span class="comment">// Watch any files in dist/, reload on change</span>
       gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);
   });
</code></pre><h3 id="五、执行gulp">五、执行gulp</h3><pre><code><span class="variable">$ </span>gulp
</code></pre><p>只需要gulp一下，之后一切都如此自动化，可以自动压缩CSS，JavaScript，图片，自动刷新浏览器等等。并且，能做的并不只有这些，另外，你还可以自己写插件。</p>
<p><img src="http://giscafer.com/static/img/gulp-intro1.png" alt="新增了dist文件夹"></p>
<p><img src="http://giscafer.com/static/img/gulp-intro2.png" alt="里边就是合并压缩的文件"></p>
<p>原src下很多文件夹，文件夹下很多js文件，如图：</p>
<p><img src="http://giscafer.com/static/img/gulp-intro0.png" alt="src文件夹"></p>
<p>不管怎么修改，会自动将整个src文件夹中的js文件（<code>src/**/*.js</code>）压缩合并到dist目录下的<code>goodgis.js</code>(合并未压缩)和<code>goodgis.mini.js</code>(合并且压缩)。</p>
<h3 id="六、总结">六、总结</h3><p>个人觉得，确实gulp会比grunt好用一点，方便；看使用场景和个人爱好吧，了解NodeJS的话就不会觉得有任何难度了。</p>
<hr>
<p><code>Unauthorized use tool that lets you work more efficiently</code></p>
<ul>
<li>构建工具官网：<a href="http://gruntjs.com/" target="_blank" rel="external">grunt</a>  、  <a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>   、 <a href="http://fis.baidu.com/" target="_blank" rel="external">fis3</a></li>
<li>livereload(浏览器自动刷新):<a href="http://feedback.livereload.com/" target="_blank" rel="external">http://feedback.livereload.com/</a>    或参考<a href="http://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-" target="_blank" rel="external">方法二</a></li>
</ul>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你是搞前端开发的，或者你每天都在写CSS、JavaScript等前端编程语言代码，如果你不知道什么叫前端自动化构建，那一般只有两种情况：</p>
<ol>
<li>你在传统软件行业，用着4、5年前网页开发方式工作;</li>
<li>你并不是一个真正的Front End Software Engineer；</li>
</ol>
<h3 id="什么是前端构建工具？">什么是前端构建工具？</h3><p>前端构建工具——实现前端代码的编译（sass、less）、压缩、测试；图片的压缩以及浏览器自动刷新等等功能。</p>
<p>目前流行的三大前端构建工具<code>grunt</code>、<code>gulp</code>、<code>fis3</code>，他们都是基于Node.js的插件工具。前两个是国外出品，fis3是百度国产。fis3听说还不错，但是还没使用过，之前学习NodeJS使用的是grunt,感觉这东西挺牛。智能、前端自动化。听说<code>gulp</code>比<code>grunt</code>好用些，所以就研究一下吧。</p>]]>
    
    </summary>
    
      <category term="AMD" scheme="http://giscafer.com/tags/AMD/"/>
    
      <category term="gulp" scheme="http://giscafer.com/tags/gulp/"/>
    
      <category term="前端构建" scheme="http://giscafer.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
      <category term="AMD" scheme="http://giscafer.com/categories/AMD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JFinal设置基础路径为WEB-INF]]></title>
    <link href="http://giscafer.com/2015/10/30/jfinal-setbaseview/"/>
    <id>http://giscafer.com/2015/10/30/jfinal-setbaseview/</id>
    <published>2015-10-30T13:49:31.000Z</published>
    <updated>2015-10-30T14:21:14.291Z</updated>
    <content type="html"><![CDATA[<h2 id="一、路由路径规则">一、路由路径规则</h2><blockquote>
<p>1：模板路径= BaseViewPath + ViewPath + render时的参数</p>
<p>2：当 render 时view的参数以 “/“ 打头，则模板路径使用从WebRoot下的绝对路</p>
<p>3：在配置路由时如果省略第三个参数，则 viewPath = controllerKey</p>
</blockquote>
<a id="more"></a>
<p>在JFinalConfig的<code>configConstant</code>方法中设置/WEB-INF/views/为基础路径；<br><code>me.setBaseViewPath(&quot;/WEB-INF/views/&quot;)</code>；</p>
<p>设定后，路由configRoute内的视图路径就会直接找<code>/WEB-INF/views/</code>下的文件，Controller里边render 时view的参数不能以 “/“ 打头，不然就是直接是找WebRoot下的绝对路径。</p>
<pre><code><span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>jfinal<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>com.jfinal.core.JFinalFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>configClass<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>com.giscafer.schedule.config.ScheduleConfig<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>jfinal<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span><span class="comment">&lt;!--此处如果不是/*的话，路由会失效--&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
</code></pre><h2 id="JFinal_过滤器拦截Servlet解决方法">JFinal 过滤器拦截Servlet解决方法</h2><p>JFinal配置的过滤器（如上过滤器配置）会拦截掉Servlet请求，这个时候可以通过配置路由处理器来解决：</p>
<pre><code><span class="comment">/**
 * 配置处理器
 */</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configHandler</span><span class="params">(Handlers me)</span> </span>{
    <span class="comment">//使用此方式跳过jfinal过滤器对servlet的拦截</span>
    me.add(<span class="keyword">new</span> UrlSkipHandler(<span class="string">"/home"</span>, <span class="literal">false</span>));
}
</code></pre><p>这样，<code>/home</code>路径的servlet就不会被jfinal的过滤器拦截了。这是最方便的解决方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一、路由路径规则">一、路由路径规则</h2><blockquote>
<p>1：模板路径= BaseViewPath + ViewPath + render时的参数</p>
<p>2：当 render 时view的参数以 “/“ 打头，则模板路径使用从WebRoot下的绝对路</p>
<p>3：在配置路由时如果省略第三个参数，则 viewPath = controllerKey</p>
</blockquote>]]>
    
    </summary>
    
      <category term="JFinal" scheme="http://giscafer.com/tags/JFinal/"/>
    
      <category term="JFinal" scheme="http://giscafer.com/categories/JFinal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用swiftype为hexo博客添加站内搜索]]></title>
    <link href="http://giscafer.com/2015/10/18/swiftype-for-hexo/"/>
    <id>http://giscafer.com/2015/10/18/swiftype-for-hexo/</id>
    <published>2015-10-18T07:42:47.000Z</published>
    <updated>2015-10-18T08:04:47.383Z</updated>
    <content type="html"><![CDATA[<p>之前使用百度站内搜索，本质其实是跳转到百度页面搜索站点内容，效果也不好，今天更换闻名已久的swiftype。</p>
<a id="more"></a>
<h3 id="下边看效果图：">下边看效果图：</h3><p><img src="/static/img/swiftype-for-hexo1.png" alt="自动搜索效果"><br><img src="/static/img/swiftype-for-hexo2.png" alt="回车搜索结果弹窗"></p>
<h3 id="实现过程">实现过程</h3><p><strong>1、注册swiftype账号，创建search engine，创建步骤简单详细；</strong></p>
<p><strong>2、添加search.ejs widget文件</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"search"</span> action=<span class="string">""</span> method=<span class="string">"get"</span> accept-charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">		<span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">class</span>=<span class="value">"st-default-search-input"</span> <span class="attribute">maxlength</span>=<span class="value">"20"</span> <span class="attribute">style</span>=<span class="value">"height:40px"</span> <span class="attribute">placeholder</span>=<span class="value">"Search"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'ZfmnF1vBkUFHkfhgCvjA'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中：以上的<code>ZfmnF1vBkUFHkfhgCvjA</code>是swiftype搜索engine key，在注册创建search engine的最后脚本代码会给出，拷贝使用即可。然后再主题下的<code>_config.yml</code>内引入</p>
<pre><code><span class="label">widgets:</span>
- search <span class="preprocessor">##swiftype</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>之前使用百度站内搜索，本质其实是跳转到百度页面搜索站点内容，效果也不好，今天更换闻名已久的swiftype。</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://giscafer.com/tags/Hexo/"/>
    
      <category term="swiftype" scheme="http://giscafer.com/tags/swiftype/"/>
    
      <category term="Hexo" scheme="http://giscafer.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于fullCalendar二次开发的排班管理和考勤签到功能]]></title>
    <link href="http://giscafer.com/2015/10/15/fullcalendar-schedule-secondary-del/"/>
    <id>http://giscafer.com/2015/10/15/fullcalendar-schedule-secondary-del/</id>
    <published>2015-10-14T16:59:48.000Z</published>
    <updated>2016-02-12T12:07:44.850Z</updated>
    <content type="html"><![CDATA[<p>最近做个GIS的巡护系统需要开发一个排班管理功能和一个考勤签到统计功能，在查找实现方式和插件后，决定使用<code>fullCalendar</code>进行二次开发来实现；<code>fullCalendar</code>是一个jQuery日历插件，使用它主要是为了借助其日期功能的实现。（另外，有个和fullCalendar类型的日历插件是<code>dhtmlxScheduler</code>，都能达到大致一样的效果）</p>
<a id="more"></a>
<p><strong>eg:fullCalendar可以使用简单的几句代码就可以实现一个中文日历了：</strong></p>
<pre><code>$(<span class="string">'#calenderDemo'</span>).<span class="atom">fullCalendar</span>({
 <span class="atom">buttonText</span>: {
  <span class="atom">today</span>: <span class="string">'今天'</span>,
  <span class="atom">month</span>: <span class="string">'月'</span>,
  <span class="atom">week</span>: <span class="string">'周'</span>,
  <span class="atom">day</span>: <span class="string">'天'</span>
 },
 <span class="atom">allDayText</span>: <span class="string">'全天'</span>,
 <span class="atom">monthNames</span>: [<span class="string">'一月'</span>,<span class="string">'二月'</span>,<span class="string">'三月'</span>,<span class="string">'四月'</span>,<span class="string">'五月'</span>,<span class="string">'六月'</span>,<span class="string">'七月'</span>,<span class="string">'八月'</span>,<span class="string">'九月'</span>,<span class="string">'十月'</span>,<span class="string">'十一月'</span>,<span class="string">'十二月'</span>],
 <span class="atom">monthNamesShort</span>: [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'10'</span>,<span class="string">'11'</span>,<span class="string">'12'</span>],
 <span class="atom">dayNames</span>: [<span class="string">'星期日'</span>,<span class="string">'星期一'</span>,<span class="string">'星期二'</span>,<span class="string">'星期三'</span>,<span class="string">'星期四'</span>,<span class="string">'星期五'</span>,<span class="string">'星期六'</span>],
 <span class="atom">dayNamesShort</span>: [<span class="string">'周日'</span>,<span class="string">'周一'</span>,<span class="string">'周二'</span>,<span class="string">'周三'</span>,<span class="string">'周四'</span>,<span class="string">'周五'</span>,<span class="string">'周六'</span>],
});
</code></pre><p><code>fullCalendar</code>目前是2.4版本，在对比源码看的时候，发现1.5和1.6的版本的源码写的相对简单易懂，所以旧使用了版本1.6.4进行修改。下边就是二次开发成果展示了！！！</p>
<h2 id="一、排班管理开发截图">一、排班管理开发截图</h2><p><img src="http://giscafer.github.io/static/img/fullcalendar_paiban_add.png" alt="排班的添加"><br><img src="http://giscafer.github.io/static/img/fullcalendar_paiban_ctrol1.png" alt="排班的班次控制：不能添加相同班次"><br><img src="http://giscafer.github.io/static/img/fullcalendar_paiban_ctrol2.png" alt="排班的班次控制：一天不能添加超过3个班次"><br><img src="http://giscafer.github.io/static/img/fullcalendar_plan_setting.png" alt="额外的功能：班次的维护，班次颜色设定和顺序修改"></p>
<p><img src="http://giscafer.github.io/static/img/fullcalendar_paiban_view.png" alt="设定的排班保存数据库后结果展示"></p>
<h2 id="二、考勤签到开发截图">二、考勤签到开发截图</h2><p><img src="http://giscafer.github.io/static/img/fullcalendar_check_1.png" alt="考勤签到9月份"></p>
<p><img src="http://giscafer.github.io/static/img/fullcalendar_check_2.png" alt="考勤签到10月份"></p>
<h2 id="三、开发总结">三、开发总结</h2><p>纯粹的JS编写和样式CSS编写，麻烦的只是数据的组装；弄清楚fullCalendar实现的原理和渲染的方式后，按照自己的业务逻辑组织好数据就可以了。</p>
<h2 id="四、源码分享">四、源码分享</h2><p>写过一个排班管理系统：<a href="https://github.com/giscafer/FinalScheduler" target="_blank" rel="external">FinalScheduler</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近做个GIS的巡护系统需要开发一个排班管理功能和一个考勤签到统计功能，在查找实现方式和插件后，决定使用<code>fullCalendar</code>进行二次开发来实现；<code>fullCalendar</code>是一个jQuery日历插件，使用它主要是为了借助其日期功能的实现。（另外，有个和fullCalendar类型的日历插件是<code>dhtmlxScheduler</code>，都能达到大致一样的效果）</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://giscafer.com/tags/JavaScript/"/>
    
      <category term="fullCalendar" scheme="http://giscafer.com/tags/fullCalendar/"/>
    
      <category term="排班管理" scheme="http://giscafer.com/tags/%E6%8E%92%E7%8F%AD%E7%AE%A1%E7%90%86/"/>
    
      <category term="考勤签到" scheme="http://giscafer.com/tags/%E8%80%83%E5%8B%A4%E7%AD%BE%E5%88%B0/"/>
    
      <category term="JavaScript" scheme="http://giscafer.com/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery-mp3.js模仿站长之家的音乐播放效果]]></title>
    <link href="http://giscafer.com/2015/09/15/jquery-mp3-demo/"/>
    <id>http://giscafer.com/2015/09/15/jquery-mp3-demo/</id>
    <published>2015-09-15T15:52:42.000Z</published>
    <updated>2015-09-15T17:39:11.820Z</updated>
    <content type="html"><![CDATA[<p><code>jquery-mp3.js</code>简称jmp3，是一个采用jQuery开发的JavaScript MP3插放器，提供一种可以在页面上直接播放MP3的简便方式。<br>详情：<a href="http://www.sean-o.com/jquery/jmp3/" target="_blank" rel="external">http://www.sean-o.com/jquery/jmp3/</a></p>
<a id="more"></a>
<p>其源代码也很简洁和简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    jQuery.fn.jmp3 = <span class="function"><span class="keyword">function</span>(<span class="params">passedOptions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="string">"playerpath"</span>: <span class="string">"music/"</span>,<span class="comment">//mp3播放器singlemp3player.swf的路径(mp3文件是用这个swf文件播放的)</span></span><br><span class="line">        <span class="string">"filepath"</span>: <span class="string">""</span>, <span class="comment">//mp3文件路径</span></span><br><span class="line">        <span class="string">"backcolor"</span>: <span class="string">""</span>,<span class="comment">//播放整体按钮的背景颜色</span></span><br><span class="line">        <span class="string">"forecolor"</span>: <span class="string">"ffffff"</span>,<span class="comment">//播放按钮【中间那个三角形】的颜色</span></span><br><span class="line">        <span class="string">"width"</span>: <span class="string">"25"</span>,<span class="comment">//播放器长度</span></span><br><span class="line">        <span class="string">"repeat"</span>: <span class="string">"no"</span>,<span class="comment">//是否重复播放mp3</span></span><br><span class="line">        <span class="string">"volume"</span>: <span class="string">"50"</span>,<span class="comment">//mp3音量 (0-100)</span></span><br><span class="line">        <span class="string">"autoplay"</span>: <span class="string">"false"</span>,<span class="comment">//当播放器初始化好后是否自动播放，默认false</span></span><br><span class="line">        <span class="string">"showdownload"</span>: <span class="string">"true"</span>,<span class="comment">//是否显示下载mp3按钮</span></span><br><span class="line">        <span class="string">"showfilename"</span>: <span class="string">"true"</span><span class="comment">//是否显示mp3的文件名称</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (passedOptions) &#123;</span><br><span class="line">        jQuery.extend(options, passedOptions);</span><br><span class="line">        playerpath = options.playerpath</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> playerpath = options.playerpath;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _container = jQuery(<span class="keyword">this</span>).prev();</span><br><span class="line">        <span class="keyword">if</span> (!_container.is(<span class="string">'.container'</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> filename = options.filepath + jQuery(<span class="keyword">this</span>).html();</span><br><span class="line">        <span class="keyword">var</span> mp3html = <span class="string">'&lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" '</span>;</span><br><span class="line">        mp3html += <span class="string">'width="'</span> + options.width + <span class="string">'" height="20" '</span>;</span><br><span class="line">        mp3html += <span class="string">'codebase="'</span> + playerpath + <span class="string">'swflash.cab"&gt;'</span>;</span><br><span class="line">        mp3html += <span class="string">'&lt;param name="movie" value="'</span> + playerpath + <span class="string">'singlemp3player.swf?'</span>;</span><br><span class="line">        mp3html += <span class="string">'showDownload='</span> + options.showdownload + <span class="string">'&amp;file='</span> + filename + <span class="string">'&amp;autoStart='</span> + options.autoplay;</span><br><span class="line">        mp3html += <span class="string">'&amp;backColor='</span> + options.backcolor + <span class="string">'&amp;frontColor='</span> + options.forecolor;</span><br><span class="line">        mp3html += <span class="string">'&amp;repeatPlay='</span> + options.repeat + <span class="string">'&amp;songVolume='</span> + options.volume + <span class="string">'" /&gt;'</span>;</span><br><span class="line">        mp3html += <span class="string">'&lt;param name="wmode" value="transparent" /&gt;'</span>;</span><br><span class="line">        mp3html += <span class="string">'&lt;embed wmode="transparent" width="'</span> + options.width + <span class="string">'" height="20" '</span>;</span><br><span class="line">        mp3html += <span class="string">'src="'</span> + playerpath + <span class="string">'singlemp3player.swf?'</span>;</span><br><span class="line">        mp3html += <span class="string">'showDownload='</span> + options.showdownload + <span class="string">'&amp;file='</span> + filename + <span class="string">'&amp;autoStart='</span> + options.autoplay;</span><br><span class="line">        mp3html += <span class="string">'&amp;backColor='</span> + options.backcolor + <span class="string">'&amp;frontColor='</span> + options.forecolor;</span><br><span class="line">        mp3html += <span class="string">'&amp;repeatPlay='</span> + options.repeat + <span class="string">'&amp;songVolume='</span> + options.volume + <span class="string">'" '</span>;</span><br><span class="line">        mp3html += <span class="string">'type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;'</span>;</span><br><span class="line">        mp3html += <span class="string">'&lt;/object&gt;'</span>;</span><br><span class="line">        <span class="keyword">if</span> (options.showfilename == <span class="string">"false"</span>) &#123;</span><br><span class="line">            jQuery(<span class="keyword">this</span>).html(<span class="string">""</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (_container.is(<span class="string">'.container'</span>)) &#123;</span><br><span class="line">            _container.prepend(mp3html + <span class="string">"&amp;nbsp;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用jmp3模拟站长之家的音乐播放效果如图：</p>
<p><img src="http://giscafer.github.io/static/img/jquery-mp3-demo.png" alt="demo效果"></p>
<p>》》》<a href="http://giscafer.github.io/static/demo/jquery-mp3/index.html" target="_blank" rel="external">【在线演示】</a>》》》》》<a href="http://giscafer.github.io/static/demo/jquery-mp3.zip" target="_blank" rel="external">【源码下载】</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>jquery-mp3.js</code>简称jmp3，是一个采用jQuery开发的JavaScript MP3插放器，提供一种可以在页面上直接播放MP3的简便方式。<br>详情：<a href="http://www.sean-o.com/jquery/jmp3/">http://www.sean-o.com/jquery/jmp3/</a></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://giscafer.com/tags/JavaScript/"/>
    
      <category term="Jquery" scheme="http://giscafer.com/tags/Jquery/"/>
    
      <category term="jmp3" scheme="http://giscafer.com/tags/jmp3/"/>
    
      <category term="JavaScript" scheme="http://giscafer.com/categories/JavaScript/"/>
    
  </entry>
  
</feed>
